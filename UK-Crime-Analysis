{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Olatunjiomotayo/Road-Traffic-Collision-Analysis-in-Cambridgeshire-UK/blob/main/UK-Crime-Analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r5Yn3Xt4c2X5",
        "outputId": "a6ec1e87-af33-4ab3-942f-d8da65ac1f83"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\r0% [Working]\r            \rGet:1 https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/ InRelease [3,626 B]\n",
            "Hit:2 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  InRelease\n",
            "Get:3 http://security.ubuntu.com/ubuntu jammy-security InRelease [129 kB]\n",
            "Hit:4 http://archive.ubuntu.com/ubuntu jammy InRelease\n",
            "Get:5 http://archive.ubuntu.com/ubuntu jammy-updates InRelease [128 kB]\n",
            "Get:6 https://r2u.stat.illinois.edu/ubuntu jammy InRelease [6,555 B]\n",
            "Get:7 http://archive.ubuntu.com/ubuntu jammy-backports InRelease [127 kB]\n",
            "Get:8 https://r2u.stat.illinois.edu/ubuntu jammy/main amd64 Packages [2,613 kB]\n",
            "Hit:9 https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy InRelease\n",
            "Get:10 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 Packages [1,452 kB]\n",
            "Hit:11 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease\n",
            "Hit:12 https://ppa.launchpadcontent.net/ubuntugis/ppa/ubuntu jammy InRelease\n",
            "Get:13 http://security.ubuntu.com/ubuntu jammy-security/universe amd64 Packages [1,164 kB]\n",
            "Get:14 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages [2,700 kB]\n",
            "Get:15 https://r2u.stat.illinois.edu/ubuntu jammy/main all Packages [8,466 kB]\n",
            "Get:16 http://security.ubuntu.com/ubuntu jammy-security/restricted amd64 Packages [3,275 kB]\n",
            "Get:17 http://security.ubuntu.com/ubuntu jammy-security/main amd64 Packages [2,424 kB]\n",
            "Fetched 22.5 MB in 3s (7,665 kB/s)\n",
            "Reading package lists... Done\n",
            "W: Skipping acquire of configured file 'main/source/Sources' as repository 'https://r2u.stat.illinois.edu/ubuntu jammy InRelease' does not seem to provide it (sources.list entry misspelt?)\n",
            "Requirement already satisfied: pyspark in /usr/local/lib/python3.10/dist-packages (3.5.3)\n",
            "Requirement already satisfied: py4j==0.10.9.7 in /usr/local/lib/python3.10/dist-packages (from pyspark) (0.10.9.7)\n",
            "Collecting odfpy\n",
            "  Downloading odfpy-1.4.1.tar.gz (717 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m717.0/717.0 kB\u001b[0m \u001b[31m14.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.10/dist-packages (from odfpy) (0.7.1)\n",
            "Building wheels for collected packages: odfpy\n",
            "  Building wheel for odfpy (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for odfpy: filename=odfpy-1.4.1-py2.py3-none-any.whl size=160672 sha256=f74e54ca14a26ca1633ca5663f1efed14b38f7c4aec5311555555d0c1ce64060\n",
            "  Stored in directory: /root/.cache/pip/wheels/c8/2e/95/90d94fe33903786937f3b8c33dd88807f792359c6424b40469\n",
            "Successfully built odfpy\n",
            "Installing collected packages: odfpy\n",
            "Successfully installed odfpy-1.4.1\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.5.2)\n",
            "Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n"
          ]
        }
      ],
      "source": [
        "# Install Java\n",
        "!apt-get update\n",
        "!apt-get install openjdk-8-jdk-headless -qq > /dev/null\n",
        "\n",
        "# Download and extract Spark\n",
        "!wget -q http://dlcdn.apache.org/spark/spark-3.5.3/spark-3.5.3-bin-hadoop3.tgz\n",
        "!tar xf spark-3.5.3-bin-hadoop3.tgz\n",
        "\n",
        "# Install required Python packages\n",
        "!pip install -q findspark\n",
        "!pip install pyspark\n",
        "!pip install odfpy\n",
        "!pip install pandas scikit-learn"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fc8th8PrdXOo"
      },
      "source": [
        "## **Set up the environment variables for Java and Spark:**"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "from os.path import abspath\n",
        "import findspark\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy import stats\n",
        "\n",
        "# Set up environment variables for Java and Spark\n",
        "os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n",
        "os.environ[\"SPARK_HOME\"] = \"/content/spark-3.5.3-bin-hadoop3\"\n",
        "\n",
        "# Initialize findspark\n",
        "findspark.init()"
      ],
      "metadata": {
        "id": "ZpvirbOE5E9C"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R02bSNMpl8ux"
      },
      "source": [
        "## **Use findspark to initialize Spark and create a SparkSession:**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "0DWLTEgal72O"
      },
      "outputs": [],
      "source": [
        "from pyspark.sql import SparkSession\n",
        "\n",
        "# Create a Spark session\n",
        "spark = SparkSession.builder \\\n",
        "    .appName(\"ODS File Processing\") \\\n",
        "    .config(\"spark.some.config.option\", \"some-value\") \\\n",
        "    .getOrCreate()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hjWB4i_2TRPx"
      },
      "source": [
        "# **Dataset 1: Police Recorded Crime (PRC) Dataset**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "dv54AzgbEZzD"
      },
      "outputs": [],
      "source": [
        "dataset = pd.read_excel(\"/content/prc-pfa-mar2013-onwards-tables-191023.ods\", sheet_name = None)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EO5rA4rtF99b",
        "outputId": "4eeb31b4-f357-4aad-fc8d-7f6ff84b774c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['Cover_sheet', 'Notes_', '2012-13', '2013-14', '2014-15', '2015-16', '2016-17', '2017-18', '2018-19', '2019-20', '2020-21', '2021-22', '2022-23', '2023-24'])"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "dataset.keys()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "CLSC4qbxH7oE"
      },
      "outputs": [],
      "source": [
        "keys_to_remove = ['Cover_sheet', 'Notes_', '2012-13', '2013-14', '2014-15', '2018-19', '2019-20', '2020-21', '2021-22', '2022-23', '2023-24']\n",
        "\n",
        "for key in keys_to_remove:\n",
        "    if key in dataset:\n",
        "        dataset.pop(key, None)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cnLMqs6pKKuF",
        "outputId": "bb719a45-543c-446b-ad3d-fe6d7a8b8d73"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['2015-16', '2016-17', '2017-18'])"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "dataset.keys()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 753
        },
        "id": "FSGuPugGKvYB",
        "outputId": "da837e0b-a008-458f-fedf-b71e8e0d7ee4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Financial Year  Financial Quarter                 Force Name  \\\n",
              "0            2015/16                  1          Avon and Somerset   \n",
              "1            2015/16                  1          Avon and Somerset   \n",
              "2            2015/16                  1          Avon and Somerset   \n",
              "3            2015/16                  1          Avon and Somerset   \n",
              "4            2015/16                  1          Avon and Somerset   \n",
              "...              ...                ...                        ...   \n",
              "21303        2015/16                  3                      Cifas   \n",
              "21304        2015/16                  3  Financial Fraud Action UK   \n",
              "21305        2015/16                  4               Action Fraud   \n",
              "21306        2015/16                  4                      Cifas   \n",
              "21307        2015/16                  4  Financial Fraud Action UK   \n",
              "\n",
              "                                     Offence Description  \\\n",
              "0                         Absconding from lawful custody   \n",
              "1          Abuse of children through sexual exploitation   \n",
              "2          Abuse of position of trust of a sexual nature   \n",
              "3      Aggravated burglary in a building other than a...   \n",
              "4       Aggravated burglary in a dwelling (outcome only)   \n",
              "...                                                  ...   \n",
              "21303                   Fraud offences recorded by CIFAS   \n",
              "21304  Fraud offences recorded by Financial Fraud Act...   \n",
              "21305            Fraud offences recorded by Action Fraud   \n",
              "21306                   Fraud offences recorded by CIFAS   \n",
              "21307  Fraud offences recorded by Financial Fraud Act...   \n",
              "\n",
              "                              Offence Group  \\\n",
              "0      Miscellaneous crimes against society   \n",
              "1                           Sexual offences   \n",
              "2                           Sexual offences   \n",
              "3                            Theft offences   \n",
              "4                            Theft offences   \n",
              "...                                     ...   \n",
              "21303                        Fraud offences   \n",
              "21304                        Fraud offences   \n",
              "21305                        Fraud offences   \n",
              "21306                        Fraud offences   \n",
              "21307                        Fraud offences   \n",
              "\n",
              "                           Offence Subgroup Offence Code  Number of Offences  \n",
              "0      Miscellaneous crimes against society           80                   3  \n",
              "1                     Other sexual offences           71                   3  \n",
              "2                     Other sexual offences           73                   5  \n",
              "3                     Non-domestic burglary           31                  13  \n",
              "4                         Domestic burglary           29                  12  \n",
              "...                                     ...          ...                 ...  \n",
              "21303                          Fraud: CIFAS        CIFAS               73454  \n",
              "21304      Fraud: Financial Fraud Action UK       FFA UK               29653  \n",
              "21305                   Fraud: Action Fraud           AF               55032  \n",
              "21306                          Fraud: CIFAS        CIFAS               70001  \n",
              "21307      Fraud: Financial Fraud Action UK       FFA UK               23033  \n",
              "\n",
              "[21308 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d9bb9670-9229-4a64-bcaa-5b5ce8931c36\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Financial Year</th>\n",
              "      <th>Financial Quarter</th>\n",
              "      <th>Force Name</th>\n",
              "      <th>Offence Description</th>\n",
              "      <th>Offence Group</th>\n",
              "      <th>Offence Subgroup</th>\n",
              "      <th>Offence Code</th>\n",
              "      <th>Number of Offences</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Absconding from lawful custody</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "      <td>80</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Abuse of children through sexual exploitation</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>71</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Abuse of position of trust of a sexual nature</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>73</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Aggravated burglary in a building other than a...</td>\n",
              "      <td>Theft offences</td>\n",
              "      <td>Non-domestic burglary</td>\n",
              "      <td>31</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Aggravated burglary in a dwelling (outcome only)</td>\n",
              "      <td>Theft offences</td>\n",
              "      <td>Domestic burglary</td>\n",
              "      <td>29</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21303</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>3</td>\n",
              "      <td>Cifas</td>\n",
              "      <td>Fraud offences recorded by CIFAS</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: CIFAS</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>73454</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21304</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>3</td>\n",
              "      <td>Financial Fraud Action UK</td>\n",
              "      <td>Fraud offences recorded by Financial Fraud Act...</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: Financial Fraud Action UK</td>\n",
              "      <td>FFA UK</td>\n",
              "      <td>29653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21305</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>4</td>\n",
              "      <td>Action Fraud</td>\n",
              "      <td>Fraud offences recorded by Action Fraud</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: Action Fraud</td>\n",
              "      <td>AF</td>\n",
              "      <td>55032</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21306</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>4</td>\n",
              "      <td>Cifas</td>\n",
              "      <td>Fraud offences recorded by CIFAS</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: CIFAS</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>70001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21307</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>4</td>\n",
              "      <td>Financial Fraud Action UK</td>\n",
              "      <td>Fraud offences recorded by Financial Fraud Act...</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: Financial Fraud Action UK</td>\n",
              "      <td>FFA UK</td>\n",
              "      <td>23033</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>21308 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d9bb9670-9229-4a64-bcaa-5b5ce8931c36')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d9bb9670-9229-4a64-bcaa-5b5ce8931c36 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d9bb9670-9229-4a64-bcaa-5b5ce8931c36');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fb162f22-f236-4fc0-856c-beeb54f23481\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fb162f22-f236-4fc0-856c-beeb54f23481')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fb162f22-f236-4fc0-856c-beeb54f23481 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_194e00d7-22f0-454f-8cf2-22d74511ae31\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_2015')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_194e00d7-22f0-454f-8cf2-22d74511ae31 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_2015');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_2015",
              "summary": "{\n  \"name\": \"df_2015\",\n  \"rows\": 21308,\n  \"fields\": [\n    {\n      \"column\": \"Financial Year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2015/16\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Financial Quarter\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Force Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 47,\n        \"samples\": [\n          \"North Wales\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 124,\n        \"samples\": [\n          \"Bigamy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Robbery\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Subgroup\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 28,\n        \"samples\": [\n          \"Death or serious injury - unlawful driving\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 124,\n        \"samples\": [\n          \"26\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number of Offences\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1501,\n        \"min\": -58,\n        \"max\": 80970,\n        \"num_unique_values\": 1716,\n        \"samples\": [\n          250\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "df_2015 = dataset[\"2015-16\"]\n",
        "df_2015"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 753
        },
        "id": "zPSvnnyER3yV",
        "outputId": "520fa886-6c39-4952-dec7-3bcb1e761e29"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Financial Year  Financial Quarter                 Force Name  \\\n",
              "0            2016/17                  1          Avon and Somerset   \n",
              "1            2016/17                  1          Avon and Somerset   \n",
              "2            2016/17                  1          Avon and Somerset   \n",
              "3            2016/17                  1          Avon and Somerset   \n",
              "4            2016/17                  1          Avon and Somerset   \n",
              "...              ...                ...                        ...   \n",
              "21303        2016/17                  3                      Cifas   \n",
              "21304        2016/17                  3  Financial Fraud Action UK   \n",
              "21305        2016/17                  4               Action Fraud   \n",
              "21306        2016/17                  4                      Cifas   \n",
              "21307        2016/17                  4  Financial Fraud Action UK   \n",
              "\n",
              "                                     Offence Description  \\\n",
              "0                         Absconding from lawful custody   \n",
              "1          Abuse of children through sexual exploitation   \n",
              "2          Abuse of position of trust of a sexual nature   \n",
              "3      Aggravated burglary in a building other than a...   \n",
              "4       Aggravated burglary in a dwelling (outcome only)   \n",
              "...                                                  ...   \n",
              "21303                   Fraud offences recorded by CIFAS   \n",
              "21304  Fraud offences recorded by Financial Fraud Act...   \n",
              "21305            Fraud offences recorded by Action Fraud   \n",
              "21306                   Fraud offences recorded by CIFAS   \n",
              "21307  Fraud offences recorded by Financial Fraud Act...   \n",
              "\n",
              "                              Offence Group  \\\n",
              "0      Miscellaneous crimes against society   \n",
              "1                           Sexual offences   \n",
              "2                           Sexual offences   \n",
              "3                            Theft offences   \n",
              "4                            Theft offences   \n",
              "...                                     ...   \n",
              "21303                        Fraud offences   \n",
              "21304                        Fraud offences   \n",
              "21305                        Fraud offences   \n",
              "21306                        Fraud offences   \n",
              "21307                        Fraud offences   \n",
              "\n",
              "                           Offence Subgroup Offence Code  Number of Offences  \n",
              "0      Miscellaneous crimes against society           80                   7  \n",
              "1                     Other sexual offences           71                   5  \n",
              "2                     Other sexual offences           73                   4  \n",
              "3                     Non-domestic burglary           31                   4  \n",
              "4                         Domestic burglary           29                  13  \n",
              "...                                     ...          ...                 ...  \n",
              "21303                          Fraud: CIFAS        CIFAS               81859  \n",
              "21304      Fraud: Financial Fraud Action UK       FFA UK               22388  \n",
              "21305                   Fraud: Action Fraud           AF               68538  \n",
              "21306                          Fraud: CIFAS        CIFAS               73051  \n",
              "21307      Fraud: Financial Fraud Action UK       FFA UK               19363  \n",
              "\n",
              "[21308 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-880db956-5cc3-4fa0-ad59-fb714da51e7b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Financial Year</th>\n",
              "      <th>Financial Quarter</th>\n",
              "      <th>Force Name</th>\n",
              "      <th>Offence Description</th>\n",
              "      <th>Offence Group</th>\n",
              "      <th>Offence Subgroup</th>\n",
              "      <th>Offence Code</th>\n",
              "      <th>Number of Offences</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2016/17</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Absconding from lawful custody</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "      <td>80</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2016/17</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Abuse of children through sexual exploitation</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>71</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2016/17</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Abuse of position of trust of a sexual nature</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>73</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2016/17</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Aggravated burglary in a building other than a...</td>\n",
              "      <td>Theft offences</td>\n",
              "      <td>Non-domestic burglary</td>\n",
              "      <td>31</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2016/17</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Aggravated burglary in a dwelling (outcome only)</td>\n",
              "      <td>Theft offences</td>\n",
              "      <td>Domestic burglary</td>\n",
              "      <td>29</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21303</th>\n",
              "      <td>2016/17</td>\n",
              "      <td>3</td>\n",
              "      <td>Cifas</td>\n",
              "      <td>Fraud offences recorded by CIFAS</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: CIFAS</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>81859</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21304</th>\n",
              "      <td>2016/17</td>\n",
              "      <td>3</td>\n",
              "      <td>Financial Fraud Action UK</td>\n",
              "      <td>Fraud offences recorded by Financial Fraud Act...</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: Financial Fraud Action UK</td>\n",
              "      <td>FFA UK</td>\n",
              "      <td>22388</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21305</th>\n",
              "      <td>2016/17</td>\n",
              "      <td>4</td>\n",
              "      <td>Action Fraud</td>\n",
              "      <td>Fraud offences recorded by Action Fraud</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: Action Fraud</td>\n",
              "      <td>AF</td>\n",
              "      <td>68538</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21306</th>\n",
              "      <td>2016/17</td>\n",
              "      <td>4</td>\n",
              "      <td>Cifas</td>\n",
              "      <td>Fraud offences recorded by CIFAS</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: CIFAS</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>73051</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21307</th>\n",
              "      <td>2016/17</td>\n",
              "      <td>4</td>\n",
              "      <td>Financial Fraud Action UK</td>\n",
              "      <td>Fraud offences recorded by Financial Fraud Act...</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: Financial Fraud Action UK</td>\n",
              "      <td>FFA UK</td>\n",
              "      <td>19363</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>21308 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-880db956-5cc3-4fa0-ad59-fb714da51e7b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-880db956-5cc3-4fa0-ad59-fb714da51e7b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-880db956-5cc3-4fa0-ad59-fb714da51e7b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d7f8b1e8-d113-4932-b057-69002abc902d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d7f8b1e8-d113-4932-b057-69002abc902d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d7f8b1e8-d113-4932-b057-69002abc902d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_eb73ce57-96bf-4c7a-98bb-4cb8a97d947f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_2016')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_eb73ce57-96bf-4c7a-98bb-4cb8a97d947f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_2016');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_2016",
              "summary": "{\n  \"name\": \"df_2016\",\n  \"rows\": 21308,\n  \"fields\": [\n    {\n      \"column\": \"Financial Year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2016/17\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Financial Quarter\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Force Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 47,\n        \"samples\": [\n          \"North Wales\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 124,\n        \"samples\": [\n          \"Bigamy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Robbery\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Subgroup\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 28,\n        \"samples\": [\n          \"Death or serious injury - unlawful driving\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 124,\n        \"samples\": [\n          \"26\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number of Offences\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1607,\n        \"min\": -2,\n        \"max\": 84476,\n        \"num_unique_values\": 1816,\n        \"samples\": [\n          669\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "df_2016 = dataset[\"2016-17\"]\n",
        "df_2016"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 753
        },
        "id": "9HNIs3_6SYDU",
        "outputId": "39424a62-b2f4-4f22-e214-8b1b76ba354f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Financial Year  Financial Quarter         Force Name  \\\n",
              "0            2017/18                  1  Avon and Somerset   \n",
              "1            2017/18                  1  Avon and Somerset   \n",
              "2            2017/18                  1  Avon and Somerset   \n",
              "3            2017/18                  1  Avon and Somerset   \n",
              "4            2017/18                  1  Avon and Somerset   \n",
              "...              ...                ...                ...   \n",
              "23063        2017/18                  3              CIFAS   \n",
              "23064        2017/18                  3         UK Finance   \n",
              "23065        2017/18                  4       Action Fraud   \n",
              "23066        2017/18                  4              CIFAS   \n",
              "23067        2017/18                  4         UK Finance   \n",
              "\n",
              "                                     Offence Description  \\\n",
              "0                         Absconding from lawful custody   \n",
              "1          Abuse of children through sexual exploitation   \n",
              "2          Abuse of position of trust of a sexual nature   \n",
              "3             Aggravated Burglary Business and Community   \n",
              "4      Aggravated burglary in a building other than a...   \n",
              "...                                                  ...   \n",
              "23063                   Fraud offences recorded by CIFAS   \n",
              "23064              Fraud offences recorded by UK Finance   \n",
              "23065            Fraud offences recorded by Action Fraud   \n",
              "23066                   Fraud offences recorded by CIFAS   \n",
              "23067              Fraud offences recorded by UK Finance   \n",
              "\n",
              "                              Offence Group  \\\n",
              "0      Miscellaneous crimes against society   \n",
              "1                           Sexual offences   \n",
              "2                           Sexual offences   \n",
              "3                            Theft offences   \n",
              "4                            Theft offences   \n",
              "...                                     ...   \n",
              "23063                        Fraud offences   \n",
              "23064                        Fraud offences   \n",
              "23065                        Fraud offences   \n",
              "23066                        Fraud offences   \n",
              "23067                        Fraud offences   \n",
              "\n",
              "                           Offence Subgroup Offence Code  Number of Offences  \n",
              "0      Miscellaneous crimes against society           80                   2  \n",
              "1                     Other sexual offences           71                   6  \n",
              "2                     Other sexual offences           73                   1  \n",
              "3                     Non-domestic burglary          31A                   2  \n",
              "4                     Non-domestic burglary           31                   0  \n",
              "...                                     ...          ...                 ...  \n",
              "23063                          Fraud: CIFAS        CIFAS               63381  \n",
              "23064                     Fraud: UK Finance   UK Finance               17188  \n",
              "23065                   Fraud: action fraud           AF               72815  \n",
              "23066                          Fraud: CIFAS        CIFAS               66760  \n",
              "23067                     Fraud: UK Finance   UK Finance               21116  \n",
              "\n",
              "[23068 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7229d376-023b-486e-acdf-4530c3379df4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Financial Year</th>\n",
              "      <th>Financial Quarter</th>\n",
              "      <th>Force Name</th>\n",
              "      <th>Offence Description</th>\n",
              "      <th>Offence Group</th>\n",
              "      <th>Offence Subgroup</th>\n",
              "      <th>Offence Code</th>\n",
              "      <th>Number of Offences</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Absconding from lawful custody</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "      <td>80</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Abuse of children through sexual exploitation</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>71</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Abuse of position of trust of a sexual nature</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>73</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Aggravated Burglary Business and Community</td>\n",
              "      <td>Theft offences</td>\n",
              "      <td>Non-domestic burglary</td>\n",
              "      <td>31A</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Aggravated burglary in a building other than a...</td>\n",
              "      <td>Theft offences</td>\n",
              "      <td>Non-domestic burglary</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23063</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>3</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>Fraud offences recorded by CIFAS</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: CIFAS</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>63381</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23064</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>3</td>\n",
              "      <td>UK Finance</td>\n",
              "      <td>Fraud offences recorded by UK Finance</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: UK Finance</td>\n",
              "      <td>UK Finance</td>\n",
              "      <td>17188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23065</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>4</td>\n",
              "      <td>Action Fraud</td>\n",
              "      <td>Fraud offences recorded by Action Fraud</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: action fraud</td>\n",
              "      <td>AF</td>\n",
              "      <td>72815</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23066</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>4</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>Fraud offences recorded by CIFAS</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: CIFAS</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>66760</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23067</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>4</td>\n",
              "      <td>UK Finance</td>\n",
              "      <td>Fraud offences recorded by UK Finance</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: UK Finance</td>\n",
              "      <td>UK Finance</td>\n",
              "      <td>21116</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>23068 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7229d376-023b-486e-acdf-4530c3379df4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7229d376-023b-486e-acdf-4530c3379df4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7229d376-023b-486e-acdf-4530c3379df4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ba84b3e6-15e9-4d1b-a740-30f2db85062f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ba84b3e6-15e9-4d1b-a740-30f2db85062f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ba84b3e6-15e9-4d1b-a740-30f2db85062f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_d3c61eb5-6d2e-4e5b-9b7d-649617c18af3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_2017')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d3c61eb5-6d2e-4e5b-9b7d-649617c18af3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_2017');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_2017",
              "summary": "{\n  \"name\": \"df_2017\",\n  \"rows\": 23068,\n  \"fields\": [\n    {\n      \"column\": \"Financial Year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2017/18\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Financial Quarter\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Force Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 48,\n        \"samples\": [\n          \"North Wales\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 135,\n        \"samples\": [\n          \"Rape of a female child under 13\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Robbery\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Subgroup\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 29,\n        \"samples\": [\n          \"Fraud: Financial Fraud Action UK\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 135,\n        \"samples\": [\n          \"19E\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number of Offences\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1548,\n        \"min\": 0,\n        \"max\": 75476,\n        \"num_unique_values\": 1906,\n        \"samples\": [\n          1585\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "df_2017 = dataset[\"2017-18\"]\n",
        "df_2017"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4N0TDC0uSrQi",
        "outputId": "6a27af07-ac5d-4e98-8067-9b3e964de4fe"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(21308, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "df_2015.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LUy1BgGjSwj9",
        "outputId": "11c11cd8-ba68-4c1d-e7da-1c6a5b3b707c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(21308, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "df_2016.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LlLompreS18-",
        "outputId": "5b269025-d32c-4fd5-917c-ad584e3ef546"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(23068, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "df_2017.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pcO6VlNWUMwp"
      },
      "source": [
        "## **Merging the 3 worksheets**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 736
        },
        "id": "Y7DG4lJqS4T5",
        "outputId": "2ba37595-ca09-4c6a-850c-79d8e7acaae1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Financial Year  Financial Quarter         Force Name  \\\n",
              "0            2015/16                  1  Avon and Somerset   \n",
              "1            2015/16                  1  Avon and Somerset   \n",
              "2            2015/16                  1  Avon and Somerset   \n",
              "3            2015/16                  1  Avon and Somerset   \n",
              "4            2015/16                  1  Avon and Somerset   \n",
              "...              ...                ...                ...   \n",
              "65679        2017/18                  3              CIFAS   \n",
              "65680        2017/18                  3         UK Finance   \n",
              "65681        2017/18                  4       Action Fraud   \n",
              "65682        2017/18                  4              CIFAS   \n",
              "65683        2017/18                  4         UK Finance   \n",
              "\n",
              "                                     Offence Description  \\\n",
              "0                         Absconding from lawful custody   \n",
              "1          Abuse of children through sexual exploitation   \n",
              "2          Abuse of position of trust of a sexual nature   \n",
              "3      Aggravated burglary in a building other than a...   \n",
              "4       Aggravated burglary in a dwelling (outcome only)   \n",
              "...                                                  ...   \n",
              "65679                   Fraud offences recorded by CIFAS   \n",
              "65680              Fraud offences recorded by UK Finance   \n",
              "65681            Fraud offences recorded by Action Fraud   \n",
              "65682                   Fraud offences recorded by CIFAS   \n",
              "65683              Fraud offences recorded by UK Finance   \n",
              "\n",
              "                              Offence Group  \\\n",
              "0      Miscellaneous crimes against society   \n",
              "1                           Sexual offences   \n",
              "2                           Sexual offences   \n",
              "3                            Theft offences   \n",
              "4                            Theft offences   \n",
              "...                                     ...   \n",
              "65679                        Fraud offences   \n",
              "65680                        Fraud offences   \n",
              "65681                        Fraud offences   \n",
              "65682                        Fraud offences   \n",
              "65683                        Fraud offences   \n",
              "\n",
              "                           Offence Subgroup Offence Code  Number of Offences  \n",
              "0      Miscellaneous crimes against society           80                   3  \n",
              "1                     Other sexual offences           71                   3  \n",
              "2                     Other sexual offences           73                   5  \n",
              "3                     Non-domestic burglary           31                  13  \n",
              "4                         Domestic burglary           29                  12  \n",
              "...                                     ...          ...                 ...  \n",
              "65679                          Fraud: CIFAS        CIFAS               63381  \n",
              "65680                     Fraud: UK Finance   UK Finance               17188  \n",
              "65681                   Fraud: action fraud           AF               72815  \n",
              "65682                          Fraud: CIFAS        CIFAS               66760  \n",
              "65683                     Fraud: UK Finance   UK Finance               21116  \n",
              "\n",
              "[65684 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4bd526f9-60c1-46fb-9a98-4faccf91e6ad\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Financial Year</th>\n",
              "      <th>Financial Quarter</th>\n",
              "      <th>Force Name</th>\n",
              "      <th>Offence Description</th>\n",
              "      <th>Offence Group</th>\n",
              "      <th>Offence Subgroup</th>\n",
              "      <th>Offence Code</th>\n",
              "      <th>Number of Offences</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Absconding from lawful custody</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "      <td>80</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Abuse of children through sexual exploitation</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>71</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Abuse of position of trust of a sexual nature</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>73</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Aggravated burglary in a building other than a...</td>\n",
              "      <td>Theft offences</td>\n",
              "      <td>Non-domestic burglary</td>\n",
              "      <td>31</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Aggravated burglary in a dwelling (outcome only)</td>\n",
              "      <td>Theft offences</td>\n",
              "      <td>Domestic burglary</td>\n",
              "      <td>29</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65679</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>3</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>Fraud offences recorded by CIFAS</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: CIFAS</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>63381</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65680</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>3</td>\n",
              "      <td>UK Finance</td>\n",
              "      <td>Fraud offences recorded by UK Finance</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: UK Finance</td>\n",
              "      <td>UK Finance</td>\n",
              "      <td>17188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65681</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>4</td>\n",
              "      <td>Action Fraud</td>\n",
              "      <td>Fraud offences recorded by Action Fraud</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: action fraud</td>\n",
              "      <td>AF</td>\n",
              "      <td>72815</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65682</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>4</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>Fraud offences recorded by CIFAS</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: CIFAS</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>66760</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65683</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>4</td>\n",
              "      <td>UK Finance</td>\n",
              "      <td>Fraud offences recorded by UK Finance</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: UK Finance</td>\n",
              "      <td>UK Finance</td>\n",
              "      <td>21116</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>65684 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4bd526f9-60c1-46fb-9a98-4faccf91e6ad')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4bd526f9-60c1-46fb-9a98-4faccf91e6ad button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4bd526f9-60c1-46fb-9a98-4faccf91e6ad');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8b6f392b-0be8-4d4c-9bcf-713dfdcc8137\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8b6f392b-0be8-4d4c-9bcf-713dfdcc8137')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8b6f392b-0be8-4d4c-9bcf-713dfdcc8137 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_3ad735b5-f1f5-4197-86b1-d7f6306e4aa0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('combined_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_3ad735b5-f1f5-4197-86b1-d7f6306e4aa0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('combined_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "combined_df",
              "summary": "{\n  \"name\": \"combined_df\",\n  \"rows\": 65684,\n  \"fields\": [\n    {\n      \"column\": \"Financial Year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2015/16\",\n          \"2016/17\",\n          \"2017/18\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Financial Quarter\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Force Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 49,\n        \"samples\": [\n          \"Gloucestershire\",\n          \"Cifas\",\n          \"CIFAS\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 135,\n        \"samples\": [\n          \"Sexual assault on a female aged 13 and over\",\n          \"Other notifiable offences\",\n          \"Stalking\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Robbery\",\n          \"Sexual offences\",\n          \"Drug offences\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Subgroup\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"Fraud: Financial Fraud Action UK\",\n          \"Possession of weapons offences\",\n          \"Bicycle theft\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 135,\n        \"samples\": [\n          \"20A\",\n          \"99\",\n          \"8Q\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number of Offences\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1552,\n        \"min\": -58,\n        \"max\": 84476,\n        \"num_unique_values\": 2968,\n        \"samples\": [\n          2511,\n          993,\n          4789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "combined_df = pd.concat([df_2015, df_2016, df_2017], ignore_index=True)\n",
        "combined_df"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fehhac-gUUIs"
      },
      "source": [
        "## **Cleaning the PRC Dataset**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ibX3mWAQS-zz",
        "outputId": "62f975d0-1014-4183-c00f-39e42753ce6c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Financial Year', 'Financial Quarter', 'Force Name',\n",
              "       'Offence Description', 'Offence Group', 'Offence Subgroup',\n",
              "       'Offence Code', 'Number of Offences'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "combined_df.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 739
        },
        "id": "Nbi-4EQgUshl",
        "outputId": "978cce74-2bb9-4b46-c9b8-a2f8b50c488a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Financial_Year  Financial_Quarter         Force_Name  \\\n",
              "0            2015/16                  1  Avon and Somerset   \n",
              "1            2015/16                  1  Avon and Somerset   \n",
              "2            2015/16                  1  Avon and Somerset   \n",
              "3            2015/16                  1  Avon and Somerset   \n",
              "4            2015/16                  1  Avon and Somerset   \n",
              "...              ...                ...                ...   \n",
              "65679        2017/18                  3              CIFAS   \n",
              "65680        2017/18                  3         UK Finance   \n",
              "65681        2017/18                  4       Action Fraud   \n",
              "65682        2017/18                  4              CIFAS   \n",
              "65683        2017/18                  4         UK Finance   \n",
              "\n",
              "                                     Offence_Description  \\\n",
              "0                         Absconding from lawful custody   \n",
              "1          Abuse of children through sexual exploitation   \n",
              "2          Abuse of position of trust of a sexual nature   \n",
              "3      Aggravated burglary in a building other than a...   \n",
              "4       Aggravated burglary in a dwelling (outcome only)   \n",
              "...                                                  ...   \n",
              "65679                   Fraud offences recorded by CIFAS   \n",
              "65680              Fraud offences recorded by UK Finance   \n",
              "65681            Fraud offences recorded by Action Fraud   \n",
              "65682                   Fraud offences recorded by CIFAS   \n",
              "65683              Fraud offences recorded by UK Finance   \n",
              "\n",
              "                              Offence_Group  \\\n",
              "0      Miscellaneous crimes against society   \n",
              "1                           Sexual offences   \n",
              "2                           Sexual offences   \n",
              "3                            Theft offences   \n",
              "4                            Theft offences   \n",
              "...                                     ...   \n",
              "65679                        Fraud offences   \n",
              "65680                        Fraud offences   \n",
              "65681                        Fraud offences   \n",
              "65682                        Fraud offences   \n",
              "65683                        Fraud offences   \n",
              "\n",
              "                           Offence_Subgroup Offence_Code  Number_of_Offences  \n",
              "0      Miscellaneous crimes against society           80                   3  \n",
              "1                     Other sexual offences           71                   3  \n",
              "2                     Other sexual offences           73                   5  \n",
              "3                     Non-domestic burglary           31                  13  \n",
              "4                         Domestic burglary           29                  12  \n",
              "...                                     ...          ...                 ...  \n",
              "65679                          Fraud: CIFAS        CIFAS               63381  \n",
              "65680                     Fraud: UK Finance   UK Finance               17188  \n",
              "65681                   Fraud: action fraud           AF               72815  \n",
              "65682                          Fraud: CIFAS        CIFAS               66760  \n",
              "65683                     Fraud: UK Finance   UK Finance               21116  \n",
              "\n",
              "[65684 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5f8de194-15ab-4fae-a75d-c5932f6e16e6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Financial_Year</th>\n",
              "      <th>Financial_Quarter</th>\n",
              "      <th>Force_Name</th>\n",
              "      <th>Offence_Description</th>\n",
              "      <th>Offence_Group</th>\n",
              "      <th>Offence_Subgroup</th>\n",
              "      <th>Offence_Code</th>\n",
              "      <th>Number_of_Offences</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Absconding from lawful custody</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "      <td>80</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Abuse of children through sexual exploitation</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>71</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Abuse of position of trust of a sexual nature</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>73</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Aggravated burglary in a building other than a...</td>\n",
              "      <td>Theft offences</td>\n",
              "      <td>Non-domestic burglary</td>\n",
              "      <td>31</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Aggravated burglary in a dwelling (outcome only)</td>\n",
              "      <td>Theft offences</td>\n",
              "      <td>Domestic burglary</td>\n",
              "      <td>29</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65679</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>3</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>Fraud offences recorded by CIFAS</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: CIFAS</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>63381</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65680</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>3</td>\n",
              "      <td>UK Finance</td>\n",
              "      <td>Fraud offences recorded by UK Finance</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: UK Finance</td>\n",
              "      <td>UK Finance</td>\n",
              "      <td>17188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65681</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>4</td>\n",
              "      <td>Action Fraud</td>\n",
              "      <td>Fraud offences recorded by Action Fraud</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: action fraud</td>\n",
              "      <td>AF</td>\n",
              "      <td>72815</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65682</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>4</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>Fraud offences recorded by CIFAS</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: CIFAS</td>\n",
              "      <td>CIFAS</td>\n",
              "      <td>66760</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65683</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>4</td>\n",
              "      <td>UK Finance</td>\n",
              "      <td>Fraud offences recorded by UK Finance</td>\n",
              "      <td>Fraud offences</td>\n",
              "      <td>Fraud: UK Finance</td>\n",
              "      <td>UK Finance</td>\n",
              "      <td>21116</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>65684 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5f8de194-15ab-4fae-a75d-c5932f6e16e6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5f8de194-15ab-4fae-a75d-c5932f6e16e6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5f8de194-15ab-4fae-a75d-c5932f6e16e6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2fcf8cae-2aa2-4f38-9107-4381b1a15098\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2fcf8cae-2aa2-4f38-9107-4381b1a15098')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2fcf8cae-2aa2-4f38-9107-4381b1a15098 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_c0c862bb-f143-4c8a-8720-bba202af0342\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('combined_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c0c862bb-f143-4c8a-8720-bba202af0342 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('combined_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "combined_df",
              "summary": "{\n  \"name\": \"combined_df\",\n  \"rows\": 65684,\n  \"fields\": [\n    {\n      \"column\": \"Financial_Year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2015/16\",\n          \"2016/17\",\n          \"2017/18\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Financial_Quarter\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Force_Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 49,\n        \"samples\": [\n          \"Gloucestershire\",\n          \"Cifas\",\n          \"CIFAS\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence_Description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 135,\n        \"samples\": [\n          \"Sexual assault on a female aged 13 and over\",\n          \"Other notifiable offences\",\n          \"Stalking\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Robbery\",\n          \"Sexual offences\",\n          \"Drug offences\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence_Subgroup\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"Fraud: Financial Fraud Action UK\",\n          \"Possession of weapons offences\",\n          \"Bicycle theft\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence_Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 135,\n        \"samples\": [\n          \"20A\",\n          \"99\",\n          \"8Q\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number_of_Offences\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1552,\n        \"min\": -58,\n        \"max\": 84476,\n        \"num_unique_values\": 2968,\n        \"samples\": [\n          2511,\n          993,\n          4789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "combined_df.columns = combined_df.columns.str.replace(' ', '_')\n",
        "combined_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "aZV1H-vDUxw-",
        "outputId": "53e6eeb4-ef8e-4cad-e5a2-d5bef856ab39"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Financial_Year         0\n",
              "Financial_Quarter      0\n",
              "Force_Name             0\n",
              "Offence_Description    0\n",
              "Offence_Group          0\n",
              "Offence_Subgroup       0\n",
              "Offence_Code           0\n",
              "Number_of_Offences     0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Financial_Year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Financial_Quarter</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Force_Name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Description</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Group</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Subgroup</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Code</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Number_of_Offences</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "combined_df.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gy4aiVHFU2dI",
        "outputId": "e67015c6-7395-4667-b290-6ab61f897ace"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "combined_df.duplicated().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oWatHZCzU8Mr",
        "outputId": "92ad311c-849e-46f0-f81d-81683ab349b2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 65684 entries, 0 to 65683\n",
            "Data columns (total 8 columns):\n",
            " #   Column               Non-Null Count  Dtype \n",
            "---  ------               --------------  ----- \n",
            " 0   Financial_Year       65684 non-null  object\n",
            " 1   Financial_Quarter    65684 non-null  int64 \n",
            " 2   Force_Name           65684 non-null  object\n",
            " 3   Offence_Description  65684 non-null  object\n",
            " 4   Offence_Group        65684 non-null  object\n",
            " 5   Offence_Subgroup     65684 non-null  object\n",
            " 6   Offence_Code         65684 non-null  object\n",
            " 7   Number_of_Offences   65684 non-null  int64 \n",
            "dtypes: int64(2), object(6)\n",
            "memory usage: 4.0+ MB\n"
          ]
        }
      ],
      "source": [
        "combined_df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LhKuumLGfJ7t"
      },
      "source": [
        "# **Loading the Dataset 2: Offence Codes**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 753
        },
        "id": "uYFm5Mjfel9i",
        "outputId": "275ad209-294b-45ec-e06c-2f308268e267"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                          Offence Code  \\\n",
              "0                                                    1   \n",
              "1                                            1/4.1/4.2   \n",
              "2                                       1/4.1/4.2/4.10   \n",
              "3                                                  104   \n",
              "4                                                 105A   \n",
              "..                                                 ...   \n",
              "193                                                 99   \n",
              "194                                                 9A   \n",
              "195                                                 9B   \n",
              "196                                                NaN   \n",
              "197  * These offences were introduced after 31 Marc...   \n",
              "\n",
              "                                   Offence description  \\\n",
              "0                                               Murder   \n",
              "1                                             Homicide   \n",
              "2                                             Homicide   \n",
              "3                Assault without injury on a constable   \n",
              "4                               Assault without injury   \n",
              "..                                                 ...   \n",
              "193                          Other notifiable offences   \n",
              "194                     Public fear, alarm or distress   \n",
              "195  Racially or religiously aggravated public fear...   \n",
              "196                                                NaN   \n",
              "197                                                NaN   \n",
              "\n",
              "            Old PRC offence group  \\\n",
              "0     Violence against the person   \n",
              "1     Violence against the person   \n",
              "2     Violence against the person   \n",
              "3     Violence against the person   \n",
              "4     Violence against the person   \n",
              "..                            ...   \n",
              "193  Other miscellaneous offences   \n",
              "194   Violence against the person   \n",
              "195   Violence against the person   \n",
              "196                           NaN   \n",
              "197                           NaN   \n",
              "\n",
              "                            Old offence sub-group  \\\n",
              "0       Violence against the person - with injury   \n",
              "1       Violence against the person - with injury   \n",
              "2       Violence against the person - with injury   \n",
              "3    Violence against the person - without injury   \n",
              "4    Violence against the person - without injury   \n",
              "..                                            ...   \n",
              "193                                           NaN   \n",
              "194  Violence against the person - without injury   \n",
              "195  Violence against the person - without injury   \n",
              "196                                           NaN   \n",
              "197                                           NaN   \n",
              "\n",
              "                    New ONS offence group  \\\n",
              "0             Violence against the person   \n",
              "1             Violence against the person   \n",
              "2             Violence against the person   \n",
              "3             Violence against the person   \n",
              "4             Violence against the person   \n",
              "..                                    ...   \n",
              "193  Miscellaneous crimes against society   \n",
              "194                 Public order offences   \n",
              "195                 Public order offences   \n",
              "196                                   NaN   \n",
              "197                                   NaN   \n",
              "\n",
              "                New ONS sub-offence group  \n",
              "0                                Homicide  \n",
              "1                                Homicide  \n",
              "2                                Homicide  \n",
              "3                 Violence without injury  \n",
              "4                 Violence without injury  \n",
              "..                                    ...  \n",
              "193  Miscellaneous crimes against society  \n",
              "194                 Public order offences  \n",
              "195                 Public order offences  \n",
              "196                                   NaN  \n",
              "197                                   NaN  \n",
              "\n",
              "[198 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0abd4067-56e3-4638-849b-6094aa7253d1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Offence Code</th>\n",
              "      <th>Offence description</th>\n",
              "      <th>Old PRC offence group</th>\n",
              "      <th>Old offence sub-group</th>\n",
              "      <th>New ONS offence group</th>\n",
              "      <th>New ONS sub-offence group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Murder</td>\n",
              "      <td>Violence against the person</td>\n",
              "      <td>Violence against the person - with injury</td>\n",
              "      <td>Violence against the person</td>\n",
              "      <td>Homicide</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1/4.1/4.2</td>\n",
              "      <td>Homicide</td>\n",
              "      <td>Violence against the person</td>\n",
              "      <td>Violence against the person - with injury</td>\n",
              "      <td>Violence against the person</td>\n",
              "      <td>Homicide</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1/4.1/4.2/4.10</td>\n",
              "      <td>Homicide</td>\n",
              "      <td>Violence against the person</td>\n",
              "      <td>Violence against the person - with injury</td>\n",
              "      <td>Violence against the person</td>\n",
              "      <td>Homicide</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>104</td>\n",
              "      <td>Assault without injury on a constable</td>\n",
              "      <td>Violence against the person</td>\n",
              "      <td>Violence against the person - without injury</td>\n",
              "      <td>Violence against the person</td>\n",
              "      <td>Violence without injury</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>105A</td>\n",
              "      <td>Assault without injury</td>\n",
              "      <td>Violence against the person</td>\n",
              "      <td>Violence against the person - without injury</td>\n",
              "      <td>Violence against the person</td>\n",
              "      <td>Violence without injury</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>193</th>\n",
              "      <td>99</td>\n",
              "      <td>Other notifiable offences</td>\n",
              "      <td>Other miscellaneous offences</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>194</th>\n",
              "      <td>9A</td>\n",
              "      <td>Public fear, alarm or distress</td>\n",
              "      <td>Violence against the person</td>\n",
              "      <td>Violence against the person - without injury</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>Public order offences</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>9B</td>\n",
              "      <td>Racially or religiously aggravated public fear...</td>\n",
              "      <td>Violence against the person</td>\n",
              "      <td>Violence against the person - without injury</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>Public order offences</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>* These offences were introduced after 31 Marc...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>198 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0abd4067-56e3-4638-849b-6094aa7253d1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0abd4067-56e3-4638-849b-6094aa7253d1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0abd4067-56e3-4638-849b-6094aa7253d1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e4d10a69-c3d2-427f-9d58-67c7102f391c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e4d10a69-c3d2-427f-9d58-67c7102f391c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e4d10a69-c3d2-427f-9d58-67c7102f391c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_ca438efe-c209-455d-8e2e-a39b3ae1a57f\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Offence_code')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ca438efe-c209-455d-8e2e-a39b3ae1a57f button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('Offence_code');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Offence_code",
              "summary": "{\n  \"name\": \"Offence_code\",\n  \"rows\": 198,\n  \"fields\": [\n    {\n      \"column\": \"Offence Code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 187,\n        \"samples\": [\n          \"9B\",\n          \"40\",\n          \"31\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 182,\n        \"samples\": [\n          \"Indecent assault on a male\",\n          \"Bigamy\",\n          \"Exposure and voyeurism\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Old PRC offence group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Criminal damage\",\n          \"Other miscellaneous offences\",\n          \"Robbery\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Old offence sub-group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Violence against the person - with injury\",\n          \"Violence against the person - without injury\",\n          \"Total burglary in a building other than a dwelling\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New ONS offence group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Public order offences\",\n          \"Possession of weapons offences\",\n          \"Robbery\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New ONS sub-offence group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 21,\n        \"samples\": [\n          \"Homicide\",\n          \"Criminal damage\",\n          \"Fraud offences to 2012/13\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "Offence_code = pd.read_excel(\"/content/reccrime-offence-ref.ods\")\n",
        "Offence_code"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0fnGoxHJgEWM",
        "outputId": "5cd8b6eb-16aa-447d-b3e6-b886c68f2fee"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(198, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "Offence_code.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NgdF7HLxfdUI",
        "outputId": "f8ad8d17-1a38-45e6-d4c4-24021732a7fb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Offence Code', 'Offence description', 'Old PRC offence group',\n",
              "       'Old offence sub-group', 'New ONS offence group',\n",
              "       'New ONS sub-offence group'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "Offence_code.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "Mb8KCCcTelr5"
      },
      "outputs": [],
      "source": [
        "Offence_code.columns = Offence_code.columns.str.replace(' ', '_')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "3Guz7cr-el1N",
        "outputId": "9c14da1a-86ab-46ba-daa7-a9562dca5215"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Offence_Code                  1\n",
              "Offence_description           2\n",
              "Old_PRC_offence_group         7\n",
              "Old_offence_sub-group        92\n",
              "New_ONS_offence_group         2\n",
              "New_ONS_sub-offence_group     2\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Offence_Code</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_description</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Old_PRC_offence_group</th>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Old_offence_sub-group</th>\n",
              "      <td>92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>New_ONS_offence_group</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>New_ONS_sub-offence_group</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "Offence_code.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 658
        },
        "id": "v5ocX1YihRFn",
        "outputId": "fb90ce35-7cf5-4323-afb1-0afc95446963"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                          Offence_Code  \\\n",
              "188                                                92D   \n",
              "189                                                92E   \n",
              "190                                                 94   \n",
              "191                                                 95   \n",
              "192                                                96*   \n",
              "193                                                 99   \n",
              "194                                                 9A   \n",
              "195                                                 9B   \n",
              "196                                                NaN   \n",
              "197  * These offences were introduced after 31 Marc...   \n",
              "\n",
              "                                   Offence_description  \\\n",
              "188    Possession of controlled drugs (excl. Cannabis)   \n",
              "189          Possession of controlled drugs (Cannabis)   \n",
              "190                                   Planning laws      \n",
              "191  Disclosure, obstruction, false or misleading s...   \n",
              "192                                  Wildlife Offences   \n",
              "193                          Other notifiable offences   \n",
              "194                     Public fear, alarm or distress   \n",
              "195  Racially or religiously aggravated public fear...   \n",
              "196                                                NaN   \n",
              "197                                                NaN   \n",
              "\n",
              "            Old_PRC_offence_group  \\\n",
              "188                 Drug offences   \n",
              "189                 Drug offences   \n",
              "190  Other miscellaneous offences   \n",
              "191  Other miscellaneous offences   \n",
              "192                           NaN   \n",
              "193  Other miscellaneous offences   \n",
              "194   Violence against the person   \n",
              "195   Violence against the person   \n",
              "196                           NaN   \n",
              "197                           NaN   \n",
              "\n",
              "                            Old_offence_sub-group  \\\n",
              "188                                           NaN   \n",
              "189                                           NaN   \n",
              "190                                           NaN   \n",
              "191                                           NaN   \n",
              "192                                           NaN   \n",
              "193                                           NaN   \n",
              "194  Violence against the person - without injury   \n",
              "195  Violence against the person - without injury   \n",
              "196                                           NaN   \n",
              "197                                           NaN   \n",
              "\n",
              "                    New_ONS_offence_group  \\\n",
              "188                         Drug offences   \n",
              "189                         Drug offences   \n",
              "190  Miscellaneous crimes against society   \n",
              "191  Miscellaneous crimes against society   \n",
              "192  Miscellaneous crimes against society   \n",
              "193  Miscellaneous crimes against society   \n",
              "194                 Public order offences   \n",
              "195                 Public order offences   \n",
              "196                                   NaN   \n",
              "197                                   NaN   \n",
              "\n",
              "                New_ONS_sub-offence_group  \n",
              "188                   Possession of drugs  \n",
              "189                   Possession of drugs  \n",
              "190  Miscellaneous crimes against society  \n",
              "191  Miscellaneous crimes against society  \n",
              "192  Miscellaneous crimes against society  \n",
              "193  Miscellaneous crimes against society  \n",
              "194                 Public order offences  \n",
              "195                 Public order offences  \n",
              "196                                   NaN  \n",
              "197                                   NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-06f6db9d-0c49-4344-ae9b-642d5b295b6a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Offence_Code</th>\n",
              "      <th>Offence_description</th>\n",
              "      <th>Old_PRC_offence_group</th>\n",
              "      <th>Old_offence_sub-group</th>\n",
              "      <th>New_ONS_offence_group</th>\n",
              "      <th>New_ONS_sub-offence_group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>188</th>\n",
              "      <td>92D</td>\n",
              "      <td>Possession of controlled drugs (excl. Cannabis)</td>\n",
              "      <td>Drug offences</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Drug offences</td>\n",
              "      <td>Possession of drugs</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>189</th>\n",
              "      <td>92E</td>\n",
              "      <td>Possession of controlled drugs (Cannabis)</td>\n",
              "      <td>Drug offences</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Drug offences</td>\n",
              "      <td>Possession of drugs</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>190</th>\n",
              "      <td>94</td>\n",
              "      <td>Planning laws</td>\n",
              "      <td>Other miscellaneous offences</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>191</th>\n",
              "      <td>95</td>\n",
              "      <td>Disclosure, obstruction, false or misleading s...</td>\n",
              "      <td>Other miscellaneous offences</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>192</th>\n",
              "      <td>96*</td>\n",
              "      <td>Wildlife Offences</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>193</th>\n",
              "      <td>99</td>\n",
              "      <td>Other notifiable offences</td>\n",
              "      <td>Other miscellaneous offences</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "      <td>Miscellaneous crimes against society</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>194</th>\n",
              "      <td>9A</td>\n",
              "      <td>Public fear, alarm or distress</td>\n",
              "      <td>Violence against the person</td>\n",
              "      <td>Violence against the person - without injury</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>Public order offences</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>9B</td>\n",
              "      <td>Racially or religiously aggravated public fear...</td>\n",
              "      <td>Violence against the person</td>\n",
              "      <td>Violence against the person - without injury</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>Public order offences</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>* These offences were introduced after 31 Marc...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-06f6db9d-0c49-4344-ae9b-642d5b295b6a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-06f6db9d-0c49-4344-ae9b-642d5b295b6a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-06f6db9d-0c49-4344-ae9b-642d5b295b6a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-40d66fe6-0508-4d0d-a210-f5bf51fadc5b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-40d66fe6-0508-4d0d-a210-f5bf51fadc5b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-40d66fe6-0508-4d0d-a210-f5bf51fadc5b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"Offence_code\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"Offence_Code\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"9B\",\n          \"92E\",\n          \"99\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence_description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Possession of controlled drugs (Cannabis)\",\n          \"Other notifiable offences\",\n          \"Possession of controlled drugs (excl. Cannabis)\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Old_PRC_offence_group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Drug offences\",\n          \"Other miscellaneous offences\",\n          \"Violence against the person\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Old_offence_sub-group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Violence against the person - without injury\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_ONS_offence_group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Drug offences\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_ONS_sub-offence_group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Possession of drugs\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "Offence_code.tail(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CP8yorCwhhLV"
      },
      "source": [
        "###  Remove the last 2 rows"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "3Gh2an5FhWSY"
      },
      "outputs": [],
      "source": [
        "Offence_code = Offence_code[:-2]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S6LuQhjZ3iuk",
        "outputId": "11985ee3-d5c7-45bd-eb26-7e9bcd46ad3f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ],
      "source": [
        "Offence_code.duplicated().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j07hZjH-4J3e",
        "outputId": "2f7ad0fc-ee50-4e3a-c2c1-fafcf53e84b7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-28-17ff3480aa73>:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  Offence_code.drop_duplicates(inplace = True)\n"
          ]
        }
      ],
      "source": [
        "Offence_code.drop_duplicates(inplace = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4rn70xYx4U-t",
        "outputId": "b2224d5b-3054-46f1-ac15-4aa6baa77552"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 186 entries, 0 to 195\n",
            "Data columns (total 6 columns):\n",
            " #   Column                     Non-Null Count  Dtype \n",
            "---  ------                     --------------  ----- \n",
            " 0   Offence_Code               186 non-null    object\n",
            " 1   Offence_description        186 non-null    object\n",
            " 2   Old_PRC_offence_group      181 non-null    object\n",
            " 3   Old_offence_sub-group      96 non-null     object\n",
            " 4   New_ONS_offence_group      186 non-null    object\n",
            " 5   New_ONS_sub-offence_group  186 non-null    object\n",
            "dtypes: object(6)\n",
            "memory usage: 10.2+ KB\n"
          ]
        }
      ],
      "source": [
        "Offence_code.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "agCW39y_6GAC",
        "outputId": "415c8b18-a335-4b8a-d5c8-788f5d77354e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Offence_Code                  0\n",
              "Offence_description           0\n",
              "Old_PRC_offence_group         5\n",
              "Old_offence_sub-group        90\n",
              "New_ONS_offence_group         0\n",
              "New_ONS_sub-offence_group     0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Offence_Code</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_description</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Old_PRC_offence_group</th>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Old_offence_sub-group</th>\n",
              "      <td>90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>New_ONS_offence_group</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>New_ONS_sub-offence_group</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "Offence_code.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "-gKlujw869kr"
      },
      "outputs": [],
      "source": [
        "Offence_code = Offence_code.drop(columns = [\"Old_offence_sub-group\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iidpCtzw8K53",
        "outputId": "81717c7d-7d8e-4f9f-8a36-d9ce091620b5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-32-a2b270b080f0>:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
            "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
            "\n",
            "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
            "\n",
            "\n",
            "  Offence_code[\"Old_PRC_offence_group\"].fillna(\"Unknown\", inplace = True)\n"
          ]
        }
      ],
      "source": [
        "Offence_code[\"Old_PRC_offence_group\"].fillna(\"Unknown\", inplace = True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IFm9fXKh8Y5M",
        "outputId": "8992719c-6c9d-4df9-afcc-4efe05f7567d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 186 entries, 0 to 195\n",
            "Data columns (total 5 columns):\n",
            " #   Column                     Non-Null Count  Dtype \n",
            "---  ------                     --------------  ----- \n",
            " 0   Offence_Code               186 non-null    object\n",
            " 1   Offence_description        186 non-null    object\n",
            " 2   Old_PRC_offence_group      186 non-null    object\n",
            " 3   New_ONS_offence_group      186 non-null    object\n",
            " 4   New_ONS_sub-offence_group  186 non-null    object\n",
            "dtypes: object(5)\n",
            "memory usage: 8.7+ KB\n"
          ]
        }
      ],
      "source": [
        "Offence_code.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ywPegsEl9Mk_"
      },
      "source": [
        "## **Create a Spark Dataframe for Combined_df of PRC Dataset**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KI3m7XC79G00",
        "outputId": "2d3898ca-988a-4c31-999c-a0faaeccf696"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------+-----------------+-----------------+--------------------+--------------------+--------------------+------------+------------------+\n",
            "|Financial_Year|Financial_Quarter|       Force_Name| Offence_Description|       Offence_Group|    Offence_Subgroup|Offence_Code|Number_of_Offences|\n",
            "+--------------+-----------------+-----------------+--------------------+--------------------+--------------------+------------+------------------+\n",
            "|       2015/16|                1|Avon and Somerset|Absconding from l...|Miscellaneous cri...|Miscellaneous cri...|          80|                 3|\n",
            "|       2015/16|                1|Avon and Somerset|Abuse of children...|     Sexual offences|Other sexual offe...|          71|                 3|\n",
            "|       2015/16|                1|Avon and Somerset|Abuse of position...|     Sexual offences|Other sexual offe...|          73|                 5|\n",
            "|       2015/16|                1|Avon and Somerset|Aggravated burgla...|      Theft offences|Non-domestic burg...|          31|                13|\n",
            "|       2015/16|                1|Avon and Somerset|Aggravated burgla...|      Theft offences|   Domestic burglary|          29|                12|\n",
            "|       2015/16|                1|Avon and Somerset|Aggravated vehicl...|      Theft offences|Theft of a motor ...|        37.2|                23|\n",
            "|       2015/16|                1|Avon and Somerset|      Aiding suicide|Miscellaneous cri...|Miscellaneous cri...|          76|                 0|\n",
            "|       2015/16|                1|Avon and Somerset|Arson endangering...|Criminal damage a...|               Arson|         56A|                30|\n",
            "|       2015/16|                1|Avon and Somerset|Arson not endange...|Criminal damage a...|               Arson|         56B|               160|\n",
            "|       2015/16|                1|Avon and Somerset| Assault with injury|Violence against ...|Violence with injury|          8N|              2461|\n",
            "|       2015/16|                1|Avon and Somerset|Assault with inte...|Violence against ...|Violence with injury|          5D|               153|\n",
            "|       2015/16|                1|Avon and Somerset|Assault without i...|Violence against ...|Violence without ...|        105A|              2531|\n",
            "|       2015/16|                1|Avon and Somerset|Assault without i...|Violence against ...|Violence without ...|         104|               124|\n",
            "|       2015/16|                1|Avon and Somerset|Attempted burglar...|      Theft offences|Non-domestic burg...|         30B|               214|\n",
            "|       2015/16|                1|Avon and Somerset|Attempted burglar...|      Theft offences|   Domestic burglary|         28B|               223|\n",
            "|       2015/16|                1|Avon and Somerset|Attempted distrac...|      Theft offences|   Domestic burglary|         28D|                 3|\n",
            "|       2015/16|                1|Avon and Somerset|    Attempted murder|Violence against ...|Violence with injury|           2|                 8|\n",
            "|       2015/16|                1|Avon and Somerset|       Bail offences|Miscellaneous cri...|Miscellaneous cri...|          83|                 1|\n",
            "|       2015/16|                1|Avon and Somerset|              Bigamy|Miscellaneous cri...|Miscellaneous cri...|          26|                 1|\n",
            "|       2015/16|                1|Avon and Somerset|           Blackmail|      Theft offences|Other theft offences|          35|                32|\n",
            "+--------------+-----------------+-----------------+--------------------+--------------------+--------------------+------------+------------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ],
      "source": [
        "spark_PRC = spark.createDataFrame(combined_df)\n",
        "spark_PRC.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3kOYGkwM97Me"
      },
      "source": [
        "## **Create a Spark Dataframe for Offence Code Dataset**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r7R5ZQRC-D4r",
        "outputId": "fbed3d56-7b4d-48dd-cbeb-a3d6278129ff"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------+--------------------+---------------------+---------------------+-------------------------+\n",
            "|  Offence_Code| Offence_description|Old_PRC_offence_group|New_ONS_offence_group|New_ONS_sub-offence_group|\n",
            "+--------------+--------------------+---------------------+---------------------+-------------------------+\n",
            "|             1|              Murder| Violence against ...| Violence against ...|                 Homicide|\n",
            "|     1/4.1/4.2|            Homicide| Violence against ...| Violence against ...|                 Homicide|\n",
            "|1/4.1/4.2/4.10|            Homicide| Violence against ...| Violence against ...|                 Homicide|\n",
            "|           104|Assault without i...| Violence against ...| Violence against ...|     Violence without ...|\n",
            "|          105A|Assault without i...| Violence against ...| Violence against ...|     Violence without ...|\n",
            "|          105B|Racially or relig...| Violence against ...| Violence against ...|     Violence without ...|\n",
            "|          106*|      Modern Slavery|              Unknown| Violence against ...|     Violence without ...|\n",
            "|           10A|Possession of fir...| Violence against ...| Possession of wea...|     Possession of wea...|\n",
            "|           10B|Possession of fir...| Other miscellaneo...| Possession of wea...|     Possession of wea...|\n",
            "|           10C|Possession of oth...| Violence against ...| Possession of wea...|     Possession of wea...|\n",
            "|           10D|Possession of art...| Violence against ...| Possession of wea...|     Possession of wea...|\n",
            "|            11|Cruelty to and ne...| Violence against ...| Violence against ...|     Violence without ...|\n",
            "|           11A|Cruelty to childr...| Violence against ...| Violence against ...|     Violence without ...|\n",
            "|            12|Abandoning child ...| Violence against ...| Violence against ...|     Violence without ...|\n",
            "|           126|Interfering with ...| Offences against ...|       Theft offences|         Vehicle offences|\n",
            "|            13|     Child abduction| Violence against ...| Violence against ...|     Violence without ...|\n",
            "|           139|   Indecent exposure|      Sexual offences|      Sexual offences|     Other sexual offe...|\n",
            "|            14|Procuring illegal...| Violence against ...| Violence against ...|     Violence without ...|\n",
            "|            15|Concealing an inf...| Other miscellaneo...| Miscellaneous cri...|     Miscellaneous cri...|\n",
            "|            16|             Buggery|      Sexual offences|      Sexual offences|     Other sexual offe...|\n",
            "+--------------+--------------------+---------------------+---------------------+-------------------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ],
      "source": [
        "spark_OffenceCode = spark.createDataFrame(Offence_code)\n",
        "spark_OffenceCode.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Create TempView for the 2 Datasets**\n",
        "\n",
        "For us to work with SQL, we have to save the spark dataframe on a SQL database by creating a temporary table to accept the data\n",
        "\n",
        "### **Temporary Table for PRC Dataset**"
      ],
      "metadata": {
        "id": "DCkmyeENKCgN"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "KA-6xcbOCd6N"
      },
      "outputs": [],
      "source": [
        "# Register the Spark DataFrames as temporary views\n",
        "spark_PRC.createOrReplaceTempView(\"PRC\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Temporary Table for OffenceCode Dataset**"
      ],
      "metadata": {
        "id": "yURBlIX7LiGe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "spark_OffenceCode.createOrReplaceTempView(\"OffenceCode\")"
      ],
      "metadata": {
        "id": "Fffmdw9TLhlj"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Joining the 2 datasets**"
      ],
      "metadata": {
        "id": "op8vnpqyLz4f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Perform the left join and rename the Offence_Code from OffenceCode table to avoid duplication\n",
        "joined_df = spark.sql(\"\"\"\n",
        "    SELECT\n",
        "        PRC.Financial_Year,\n",
        "        PRC.Financial_Quarter,\n",
        "        PRC.Force_Name,\n",
        "        PRC.Offence_Description AS Offence_Description,\n",
        "        PRC.Offence_Group,\n",
        "        PRC.Offence_Subgroup,\n",
        "        PRC.Offence_Code AS Offence_Code,\n",
        "        PRC.Number_of_Offences,\n",
        "        OffenceCode.Old_PRC_offence_group,\n",
        "        OffenceCode.New_ONS_offence_group,\n",
        "        OffenceCode.`New_ONS_sub-offence_group`\n",
        "    FROM PRC\n",
        "    LEFT JOIN OffenceCode ON PRC.Offence_Code = OffenceCode.Offence_Code\n",
        "\"\"\")\n",
        "\n",
        "joined_df.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dlALJzAYLzpa",
        "outputId": "ae960603-8919-4cda-a4d5-9902295d489c"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------+-----------------+-----------------+--------------------+--------------------+--------------------+------------+------------------+---------------------+---------------------+-------------------------+\n",
            "|Financial_Year|Financial_Quarter|       Force_Name| Offence_Description|       Offence_Group|    Offence_Subgroup|Offence_Code|Number_of_Offences|Old_PRC_offence_group|New_ONS_offence_group|New_ONS_sub-offence_group|\n",
            "+--------------+-----------------+-----------------+--------------------+--------------------+--------------------+------------+------------------+---------------------+---------------------+-------------------------+\n",
            "|       2015/16|                1|Avon and Somerset|Assault without i...|Violence against ...|Violence without ...|         104|               124| Violence against ...| Violence against ...|     Violence without ...|\n",
            "|       2015/16|                1|Avon and Somerset|Assault without i...|Violence against ...|Violence without ...|        105A|              2531| Violence against ...| Violence against ...|     Violence without ...|\n",
            "|       2016/17|                3|          Cumbria|Sexual assault on...|     Sexual offences|Other sexual offe...|         17A|                 8|      Sexual offences|      Sexual offences|     Other sexual offe...|\n",
            "|       2016/17|                3|          Cumbria|Sexual assault on...|     Sexual offences|Other sexual offe...|         17B|                 5|      Sexual offences|      Sexual offences|     Other sexual offe...|\n",
            "|       2016/17|                3|          Cumbria|Rape of a female ...|     Sexual offences|       Rape offences|         19C|                35|      Sexual offences|      Sexual offences|                     Rape|\n",
            "|       2016/17|                3|          Cumbria|Rape of a female ...|     Sexual offences|       Rape offences|         19D|                 3|      Sexual offences|      Sexual offences|                     Rape|\n",
            "|       2016/17|                3|          Cumbria|Rape of a female ...|     Sexual offences|       Rape offences|         19E|                13|      Sexual offences|      Sexual offences|                     Rape|\n",
            "|       2016/17|                3|          Cumbria|Rape of a male ag...|     Sexual offences|       Rape offences|         19F|                 3|      Sexual offences|      Sexual offences|                     Rape|\n",
            "|       2016/17|                3|          Cumbria|Rape of a male ch...|     Sexual offences|       Rape offences|         19G|                 3|      Sexual offences|      Sexual offences|                     Rape|\n",
            "|       2016/17|                3|          Cumbria|Rape of a male ch...|     Sexual offences|       Rape offences|         19H|                 8|      Sexual offences|      Sexual offences|                     Rape|\n",
            "|       2015/16|                1|Avon and Somerset|    Attempted murder|Violence against ...|Violence with injury|           2|                 8| Violence against ...| Violence against ...|     Violence with injury|\n",
            "|       2016/17|                3|          Cumbria|Sexual assault on...|     Sexual offences|Other sexual offe...|         20A|                58|      Sexual offences|      Sexual offences|     Other sexual offe...|\n",
            "|       2016/17|                3|          Cumbria|Sexual assault on...|     Sexual offences|Other sexual offe...|         20B|                24|      Sexual offences|      Sexual offences|     Other sexual offe...|\n",
            "|       2016/17|                3|          Cumbria|Sexual activity i...|     Sexual offences|Other sexual offe...|          21|                24|      Sexual offences|      Sexual offences|     Other sexual offe...|\n",
            "|       2016/17|                3|          Cumbria|Sexual activity i...|     Sexual offences|Other sexual offe...|         22B|                47|      Sexual offences|      Sexual offences|     Other sexual offe...|\n",
            "|       2015/16|                1|Avon and Somerset|              Bigamy|Miscellaneous cri...|Miscellaneous cri...|          26|                 1| Other miscellaneo...| Miscellaneous cri...|     Miscellaneous cri...|\n",
            "|       2016/17|                3|          Cumbria|Soliciting for th...|Miscellaneous cri...|Miscellaneous cri...|          27|                 1|      Sexual offences| Miscellaneous cri...|     Miscellaneous cri...|\n",
            "|       2015/16|                1|Avon and Somerset|Attempted burglar...|      Theft offences|   Domestic burglary|         28B|               223|             Burglary|       Theft offences|        Domestic burglary|\n",
            "|       2015/16|                1|Avon and Somerset|Attempted distrac...|      Theft offences|   Domestic burglary|         28D|                 3|             Burglary|       Theft offences|        Domestic burglary|\n",
            "|       2015/16|                1|Avon and Somerset|Aggravated burgla...|      Theft offences|   Domestic burglary|          29|                12|             Burglary|       Theft offences|        Domestic burglary|\n",
            "+--------------+-----------------+-----------------+--------------------+--------------------+--------------------+------------+------------------+---------------------+---------------------+-------------------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YD_vsaAXFcR0",
        "outputId": "abb2a6f5-8439-408b-cdae-7dbd3c80f80f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "root\n",
            " |-- Financial_Year: string (nullable = true)\n",
            " |-- Financial_Quarter: long (nullable = true)\n",
            " |-- Force_Name: string (nullable = true)\n",
            " |-- Offence_Description: string (nullable = true)\n",
            " |-- Offence_Group: string (nullable = true)\n",
            " |-- Offence_Subgroup: string (nullable = true)\n",
            " |-- Offence_Code: string (nullable = true)\n",
            " |-- Number_of_Offences: long (nullable = true)\n",
            " |-- Old_PRC_offence_group: string (nullable = true)\n",
            " |-- New_ONS_offence_group: string (nullable = true)\n",
            " |-- New_ONS_sub-offence_group: string (nullable = true)\n",
            "\n"
          ]
        }
      ],
      "source": [
        "joined_df.printSchema()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Temporary Table for Merged Data**"
      ],
      "metadata": {
        "id": "P--ue0mAMkn8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "joined_df.createOrReplaceTempView(\"Newdataset\") #creating a temporary table"
      ],
      "metadata": {
        "id": "RT37QcYQMcZK"
      },
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "spark.sql(\"select * from Newdataset\").show(5) # Select all data from temp table"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uQwi3PEjNPiA",
        "outputId": "6c63e590-efa7-4f26-d053-9b20ff5b5d44"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------+-----------------+----------+--------------------+---------------+----------------+------------+------------------+---------------------+---------------------+-------------------------+\n",
            "|Financial_Year|Financial_Quarter|Force_Name| Offence_Description|  Offence_Group|Offence_Subgroup|Offence_Code|Number_of_Offences|Old_PRC_offence_group|New_ONS_offence_group|New_ONS_sub-offence_group|\n",
            "+--------------+-----------------+----------+--------------------+---------------+----------------+------------+------------------+---------------------+---------------------+-------------------------+\n",
            "|       2016/17|                3|   Cumbria|Rape of a female ...|Sexual offences|   Rape offences|         19C|                35|      Sexual offences|      Sexual offences|                     Rape|\n",
            "|       2016/17|                3|   Cumbria|Rape of a female ...|Sexual offences|   Rape offences|         19D|                 3|      Sexual offences|      Sexual offences|                     Rape|\n",
            "|       2016/17|                3|   Cumbria|Rape of a female ...|Sexual offences|   Rape offences|         19E|                13|      Sexual offences|      Sexual offences|                     Rape|\n",
            "|       2016/17|                3|   Cumbria|Rape of a male ag...|Sexual offences|   Rape offences|         19F|                 3|      Sexual offences|      Sexual offences|                     Rape|\n",
            "|       2016/17|                3|   Cumbria|Rape of a male ch...|Sexual offences|   Rape offences|         19H|                 8|      Sexual offences|      Sexual offences|                     Rape|\n",
            "+--------------+-----------------+----------+--------------------+---------------+----------------+------------+------------------+---------------------+---------------------+-------------------------+\n",
            "only showing top 5 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Total Count**"
      ],
      "metadata": {
        "id": "-HUtB7qENZNG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "spark.sql(\"select count(*) as total_count from Newdataset\").show() # Select count of data in table"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jt3NMjFMNY7Z",
        "outputId": "fc614abf-cf01-4d7e-9899-1cb384e80607"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-----------+\n",
            "|total_count|\n",
            "+-----------+\n",
            "|      65684|\n",
            "+-----------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Locate Dinstinct Values**"
      ],
      "metadata": {
        "id": "xb5ULu-sNjJc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "spark.sql(\"SELECT DISTINCT \tFinancial_Quarter FROM Newdataset\").show() #highlighting the different Financial_Quarter in the table"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "27WY6qy3NgyG",
        "outputId": "8d7d08be-8674-4ffb-ed7c-6d0e1808df3d"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-----------------+\n",
            "|Financial_Quarter|\n",
            "+-----------------+\n",
            "|                1|\n",
            "|                3|\n",
            "|                2|\n",
            "|                4|\n",
            "+-----------------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "spark.sql(\"SELECT DISTINCT Force_Name FROM Newdataset\").show(50) #highlighting the different Forcenames in the table\n",
        "spark.sql(\"select COUNT(DISTINCT Force_Name) from Newdataset\").show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W3YpzzU-SZ7D",
        "outputId": "867218bc-ae64-4807-f44c-5060db8fe871"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------------+\n",
            "|          Force_Name|\n",
            "+--------------------+\n",
            "|       Thames Valley|\n",
            "|               Gwent|\n",
            "|           Hampshire|\n",
            "|       Staffordshire|\n",
            "|     Gloucestershire|\n",
            "|     Nottinghamshire|\n",
            "|     North Yorkshire|\n",
            "|              Surrey|\n",
            "|             Cumbria|\n",
            "|           Cleveland|\n",
            "|British Transport...|\n",
            "|     London, City of|\n",
            "|          Merseyside|\n",
            "|  Greater Manchester|\n",
            "|          Lancashire|\n",
            "|        Warwickshire|\n",
            "|       Hertfordshire|\n",
            "|           Wiltshire|\n",
            "|      Leicestershire|\n",
            "| Metropolitan Police|\n",
            "|              Dorset|\n",
            "|        Bedfordshire|\n",
            "|         North Wales|\n",
            "|                Kent|\n",
            "|   Avon and Somerset|\n",
            "|               Cifas|\n",
            "|             Norfolk|\n",
            "|         South Wales|\n",
            "|              Sussex|\n",
            "|      Cambridgeshire|\n",
            "|          Derbyshire|\n",
            "|Financial Fraud A...|\n",
            "|              Durham|\n",
            "|     South Yorkshire|\n",
            "|             Suffolk|\n",
            "|    Northamptonshire|\n",
            "|         Northumbria|\n",
            "|         Dyfed-Powys|\n",
            "|        Lincolnshire|\n",
            "|       West Midlands|\n",
            "|        Action Fraud|\n",
            "|            Cheshire|\n",
            "|          Humberside|\n",
            "|  Devon and Cornwall|\n",
            "|         West Mercia|\n",
            "|               Essex|\n",
            "|      West Yorkshire|\n",
            "|               CIFAS|\n",
            "|          UK Finance|\n",
            "+--------------------+\n",
            "\n",
            "+--------------------------+\n",
            "|count(DISTINCT Force_Name)|\n",
            "+--------------------------+\n",
            "|                        49|\n",
            "+--------------------------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "spark.sql(\"SELECT DISTINCT Offence_Group FROM Newdataset\").show() #highlighting the different Offence_Group in the table\n",
        "spark.sql(\"select COUNT(DISTINCT Offence_Group) from Newdataset\").show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p9FyTOaSSvJY",
        "outputId": "3bbef9b2-4448-4406-f744-e5af6a3965bc"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------------+\n",
            "|       Offence_Group|\n",
            "+--------------------+\n",
            "|Public order offe...|\n",
            "|             Robbery|\n",
            "|      Fraud offences|\n",
            "|     Sexual offences|\n",
            "|Criminal damage a...|\n",
            "|Possession of wea...|\n",
            "|       Drug offences|\n",
            "|      Theft offences|\n",
            "|Miscellaneous cri...|\n",
            "|Violence against ...|\n",
            "+--------------------+\n",
            "\n",
            "+-----------------------------+\n",
            "|count(DISTINCT Offence_Group)|\n",
            "+-----------------------------+\n",
            "|                           10|\n",
            "+-----------------------------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "spark.sql(\"DESCRIBE Newdataset\").show() #description of table"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a0LJhx21S8eM",
        "outputId": "8e8bd7df-2b51-4d81-896a-a2090ec038ed"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------------+---------+-------+\n",
            "|            col_name|data_type|comment|\n",
            "+--------------------+---------+-------+\n",
            "|      Financial_Year|   string|   NULL|\n",
            "|   Financial_Quarter|   bigint|   NULL|\n",
            "|          Force_Name|   string|   NULL|\n",
            "| Offence_Description|   string|   NULL|\n",
            "|       Offence_Group|   string|   NULL|\n",
            "|    Offence_Subgroup|   string|   NULL|\n",
            "|        Offence_Code|   string|   NULL|\n",
            "|  Number_of_Offences|   bigint|   NULL|\n",
            "|Old_PRC_offence_g...|   string|   NULL|\n",
            "|New_ONS_offence_g...|   string|   NULL|\n",
            "|New_ONS_sub-offen...|   string|   NULL|\n",
            "+--------------------+---------+-------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "spark.sql(\"SHOW COLUMNS FROM Newdataset\").show() #descriotion of table"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h8AkUaA1TVDY",
        "outputId": "918fa860-b55d-435a-e84d-8a98b12c3391"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------------+\n",
            "|            col_name|\n",
            "+--------------------+\n",
            "|      Financial_Year|\n",
            "|   Financial_Quarter|\n",
            "|          Force_Name|\n",
            "| Offence_Description|\n",
            "|       Offence_Group|\n",
            "|    Offence_Subgroup|\n",
            "|        Offence_Code|\n",
            "|  Number_of_Offences|\n",
            "|Old_PRC_offence_g...|\n",
            "|New_ONS_offence_g...|\n",
            "|New_ONS_sub-offen...|\n",
            "+--------------------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Handling Null Values**"
      ],
      "metadata": {
        "id": "D9L1f8TUVWF8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "spark.sql(\"SELECT * FROM Newdataset WHERE New_ONS_offence_group IS NULL\").show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BCyVjwvyUyh3",
        "outputId": "125e16b5-5742-4522-c58d-b2d0432fbdeb"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------+-----------------+--------------------+--------------------+--------------------+--------------------+------------+------------------+---------------------+---------------------+-------------------------+\n",
            "|Financial_Year|Financial_Quarter|          Force_Name| Offence_Description|       Offence_Group|    Offence_Subgroup|Offence_Code|Number_of_Offences|Old_PRC_offence_group|New_ONS_offence_group|New_ONS_sub-offence_group|\n",
            "+--------------+-----------------+--------------------+--------------------+--------------------+--------------------+------------+------------------+---------------------+---------------------+-------------------------+\n",
            "|       2015/16|                1|               Cifas|Fraud offences re...|      Fraud offences|        Fraud: CIFAS|       CIFAS|             74543|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                2|               Cifas|Fraud offences re...|      Fraud offences|        Fraud: CIFAS|       CIFAS|             80970|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                3|               Cifas|Fraud offences re...|      Fraud offences|        Fraud: CIFAS|       CIFAS|             73454|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                4|               Cifas|Fraud offences re...|      Fraud offences|        Fraud: CIFAS|       CIFAS|             70001|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|   Avon and Somerset|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 0|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|        Bedfordshire|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 0|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|British Transport...|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 0|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|      Cambridgeshire|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 0|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|            Cheshire|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 0|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|           Cleveland|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 0|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|             Cumbria|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 0|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|          Derbyshire|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 0|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|  Devon and Cornwall|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 1|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|              Dorset|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 0|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|              Durham|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 0|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|         Dyfed-Powys|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 1|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|               Essex|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 0|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|     Gloucestershire|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 0|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|  Greater Manchester|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 1|                 NULL|                 NULL|                     NULL|\n",
            "|       2015/16|                1|               Gwent|            Wildlife|Miscellaneous cri...|Miscellaneous cri...|          96|                 0|                 NULL|                 NULL|                     NULL|\n",
            "+--------------+-----------------+--------------------+--------------------+--------------------+--------------------+------------+------------------+---------------------+---------------------+-------------------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "spark.sql(\"\"\"\n",
        "    SELECT *,\n",
        "    COALESCE(New_ONS_offence_group, 'unknown') AS Nogp,\n",
        "    COALESCE(`New_ONS_sub-offence_group`, 'unknown') AS Nosgp\n",
        "    FROM Newdataset\n",
        "\"\"\").show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "anNTrzMBV6Kc",
        "outputId": "2b19ae23-a4a3-4614-a217-1b6620865cc1"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------+-----------------+-----------------+--------------------+--------------------+--------------------+------------+------------------+---------------------+---------------------+-------------------------+--------------------+--------------------+\n",
            "|Financial_Year|Financial_Quarter|       Force_Name| Offence_Description|       Offence_Group|    Offence_Subgroup|Offence_Code|Number_of_Offences|Old_PRC_offence_group|New_ONS_offence_group|New_ONS_sub-offence_group|                Nogp|               Nosgp|\n",
            "+--------------+-----------------+-----------------+--------------------+--------------------+--------------------+------------+------------------+---------------------+---------------------+-------------------------+--------------------+--------------------+\n",
            "|       2015/16|                1|Avon and Somerset|Assault without i...|Violence against ...|Violence without ...|         104|               124| Violence against ...| Violence against ...|     Violence without ...|Violence against ...|Violence without ...|\n",
            "|       2015/16|                1|Avon and Somerset|Assault without i...|Violence against ...|Violence without ...|        105A|              2531| Violence against ...| Violence against ...|     Violence without ...|Violence against ...|Violence without ...|\n",
            "|       2016/17|                3|          Cumbria|Sexual assault on...|     Sexual offences|Other sexual offe...|         17A|                 8|      Sexual offences|      Sexual offences|     Other sexual offe...|     Sexual offences|Other sexual offe...|\n",
            "|       2016/17|                3|          Cumbria|Sexual assault on...|     Sexual offences|Other sexual offe...|         17B|                 5|      Sexual offences|      Sexual offences|     Other sexual offe...|     Sexual offences|Other sexual offe...|\n",
            "|       2016/17|                3|          Cumbria|Rape of a female ...|     Sexual offences|       Rape offences|         19C|                35|      Sexual offences|      Sexual offences|                     Rape|     Sexual offences|                Rape|\n",
            "|       2016/17|                3|          Cumbria|Rape of a female ...|     Sexual offences|       Rape offences|         19D|                 3|      Sexual offences|      Sexual offences|                     Rape|     Sexual offences|                Rape|\n",
            "|       2016/17|                3|          Cumbria|Rape of a female ...|     Sexual offences|       Rape offences|         19E|                13|      Sexual offences|      Sexual offences|                     Rape|     Sexual offences|                Rape|\n",
            "|       2016/17|                3|          Cumbria|Rape of a male ag...|     Sexual offences|       Rape offences|         19F|                 3|      Sexual offences|      Sexual offences|                     Rape|     Sexual offences|                Rape|\n",
            "|       2016/17|                3|          Cumbria|Rape of a male ch...|     Sexual offences|       Rape offences|         19G|                 3|      Sexual offences|      Sexual offences|                     Rape|     Sexual offences|                Rape|\n",
            "|       2016/17|                3|          Cumbria|Rape of a male ch...|     Sexual offences|       Rape offences|         19H|                 8|      Sexual offences|      Sexual offences|                     Rape|     Sexual offences|                Rape|\n",
            "|       2015/16|                1|Avon and Somerset|    Attempted murder|Violence against ...|Violence with injury|           2|                 8| Violence against ...| Violence against ...|     Violence with injury|Violence against ...|Violence with injury|\n",
            "|       2016/17|                3|          Cumbria|Sexual assault on...|     Sexual offences|Other sexual offe...|         20A|                58|      Sexual offences|      Sexual offences|     Other sexual offe...|     Sexual offences|Other sexual offe...|\n",
            "|       2016/17|                3|          Cumbria|Sexual assault on...|     Sexual offences|Other sexual offe...|         20B|                24|      Sexual offences|      Sexual offences|     Other sexual offe...|     Sexual offences|Other sexual offe...|\n",
            "|       2016/17|                3|          Cumbria|Sexual activity i...|     Sexual offences|Other sexual offe...|          21|                24|      Sexual offences|      Sexual offences|     Other sexual offe...|     Sexual offences|Other sexual offe...|\n",
            "|       2016/17|                3|          Cumbria|Sexual activity i...|     Sexual offences|Other sexual offe...|         22B|                47|      Sexual offences|      Sexual offences|     Other sexual offe...|     Sexual offences|Other sexual offe...|\n",
            "|       2015/16|                1|Avon and Somerset|              Bigamy|Miscellaneous cri...|Miscellaneous cri...|          26|                 1| Other miscellaneo...| Miscellaneous cri...|     Miscellaneous cri...|Miscellaneous cri...|Miscellaneous cri...|\n",
            "|       2016/17|                3|          Cumbria|Soliciting for th...|Miscellaneous cri...|Miscellaneous cri...|          27|                 1|      Sexual offences| Miscellaneous cri...|     Miscellaneous cri...|Miscellaneous cri...|Miscellaneous cri...|\n",
            "|       2015/16|                1|Avon and Somerset|Attempted burglar...|      Theft offences|   Domestic burglary|         28B|               223|             Burglary|       Theft offences|        Domestic burglary|      Theft offences|   Domestic burglary|\n",
            "|       2015/16|                1|Avon and Somerset|Attempted distrac...|      Theft offences|   Domestic burglary|         28D|                 3|             Burglary|       Theft offences|        Domestic burglary|      Theft offences|   Domestic burglary|\n",
            "|       2015/16|                1|Avon and Somerset|Aggravated burgla...|      Theft offences|   Domestic burglary|          29|                12|             Burglary|       Theft offences|        Domestic burglary|      Theft offences|   Domestic burglary|\n",
            "+--------------+-----------------+-----------------+--------------------+--------------------+--------------------+------------+------------------+---------------------+---------------------+-------------------------+--------------------+--------------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop columns using Spark SQL\n",
        "spark.sql(\"\"\"\n",
        "    SELECT\n",
        "        Financial_Year,\n",
        "        Force_Name,\n",
        "        Offence_Description,\n",
        "        Number_of_Offences,\n",
        "        Offence_Group,\n",
        "        Offence_Code,\n",
        "        Number_of_Offences\n",
        "    FROM Newdataset\n",
        "\"\"\").show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xFeXZSO-jml7",
        "outputId": "144ae746-18bf-458a-ad59-227bf8449c88"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------+-----------------+--------------------+------------------+--------------------+------------+------------------+\n",
            "|Financial_Year|       Force_Name| Offence_Description|Number_of_Offences|       Offence_Group|Offence_Code|Number_of_Offences|\n",
            "+--------------+-----------------+--------------------+------------------+--------------------+------------+------------------+\n",
            "|       2015/16|Avon and Somerset|Assault without i...|               124|Violence against ...|         104|               124|\n",
            "|       2015/16|Avon and Somerset|Assault without i...|              2531|Violence against ...|        105A|              2531|\n",
            "|       2016/17|          Cumbria|Sexual assault on...|                 8|     Sexual offences|         17A|                 8|\n",
            "|       2016/17|          Cumbria|Sexual assault on...|                 5|     Sexual offences|         17B|                 5|\n",
            "|       2016/17|          Cumbria|Rape of a female ...|                35|     Sexual offences|         19C|                35|\n",
            "|       2016/17|          Cumbria|Rape of a female ...|                 3|     Sexual offences|         19D|                 3|\n",
            "|       2016/17|          Cumbria|Rape of a female ...|                13|     Sexual offences|         19E|                13|\n",
            "|       2016/17|          Cumbria|Rape of a male ag...|                 3|     Sexual offences|         19F|                 3|\n",
            "|       2016/17|          Cumbria|Rape of a male ch...|                 3|     Sexual offences|         19G|                 3|\n",
            "|       2016/17|          Cumbria|Rape of a male ch...|                 8|     Sexual offences|         19H|                 8|\n",
            "|       2015/16|Avon and Somerset|    Attempted murder|                 8|Violence against ...|           2|                 8|\n",
            "|       2016/17|          Cumbria|Sexual assault on...|                58|     Sexual offences|         20A|                58|\n",
            "|       2016/17|          Cumbria|Sexual assault on...|                24|     Sexual offences|         20B|                24|\n",
            "|       2016/17|          Cumbria|Sexual activity i...|                24|     Sexual offences|          21|                24|\n",
            "|       2016/17|          Cumbria|Sexual activity i...|                47|     Sexual offences|         22B|                47|\n",
            "|       2015/16|Avon and Somerset|              Bigamy|                 1|Miscellaneous cri...|          26|                 1|\n",
            "|       2016/17|          Cumbria|Soliciting for th...|                 1|Miscellaneous cri...|          27|                 1|\n",
            "|       2015/16|Avon and Somerset|Attempted burglar...|               223|      Theft offences|         28B|               223|\n",
            "|       2015/16|Avon and Somerset|Attempted distrac...|                 3|      Theft offences|         28D|                 3|\n",
            "|       2015/16|Avon and Somerset|Aggravated burgla...|                12|      Theft offences|          29|                12|\n",
            "+--------------+-----------------+--------------------+------------------+--------------------+------------+------------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Show number of offences**"
      ],
      "metadata": {
        "id": "i5lffoCTXg6r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "spark.sql(\"SELECT Force_Name, Offence_Code, Number_of_Offences FROM Newdataset WHERE Number_of_Offences = 1\").show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jUarHDSwXoig",
        "outputId": "3ab838a6-4885-4e1c-fedc-f7c554e5816c"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+------------------+------------+------------------+\n",
            "|        Force_Name|Offence_Code|Number_of_Offences|\n",
            "+------------------+------------+------------------+\n",
            "| Avon and Somerset|           1|                 1|\n",
            "|      Bedfordshire|         19G|                 1|\n",
            "|      Bedfordshire|           2|                 1|\n",
            "|        Derbyshire|           2|                 1|\n",
            "|            Dorset|           2|                 1|\n",
            "| Avon and Somerset|         22A|                 1|\n",
            "|      Bedfordshire|          24|                 1|\n",
            "|        Derbyshire|          24|                 1|\n",
            "| Avon and Somerset|          26|                 1|\n",
            "|      Bedfordshire|          26|                 1|\n",
            "|           Cumbria|          27|                 1|\n",
            "|Devon and Cornwall|         28C|                 1|\n",
            "|      Bedfordshire|         28D|                 1|\n",
            "| Avon and Somerset|         33A|                 1|\n",
            "|      Bedfordshire|         33A|                 1|\n",
            "|      Bedfordshire|          38|                 1|\n",
            "|            Dorset|         4.6|                 1|\n",
            "|Devon and Cornwall|         4.7|                 1|\n",
            "|        Derbyshire|         4.8|                 1|\n",
            "|            Dorset|         4.8|                 1|\n",
            "+------------------+------------+------------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Research Question 1:**"
      ],
      "metadata": {
        "id": "ckDqsQI3YhFD"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "What is the most common offence group based on the total number of occurrences?"
      ],
      "metadata": {
        "id": "UK_9R5PFZSuN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the total number of occurrences for each offence group\n",
        "most_common_offence_group = spark.sql(\"\"\"\n",
        "    SELECT Offence_Group, SUM(Number_of_Offences) AS TotalOccurrences\n",
        "    FROM Newdataset\n",
        "    GROUP BY Offence_Group\n",
        "    ORDER BY TotalOccurrences DESC\n",
        "\"\"\")\n",
        "\n",
        "# Show the result to verify the query works\n",
        "most_common_offence_group.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T4QnzOOWc91D",
        "outputId": "7f5048aa-ed4c-4885-8ea5-dad62f7807a4"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------------+----------------+\n",
            "|       Offence_Group|TotalOccurrences|\n",
            "+--------------------+----------------+\n",
            "|      Theft offences|         5651755|\n",
            "|Violence against ...|         3547677|\n",
            "|      Fraud offences|         1909872|\n",
            "|Criminal damage a...|         1696426|\n",
            "|Public order offe...|          876423|\n",
            "|       Drug offences|          427401|\n",
            "|     Sexual offences|          383281|\n",
            "|Miscellaneous cri...|          238204|\n",
            "|             Robbery|          187893|\n",
            "|Possession of wea...|           96190|\n",
            "+--------------------+----------------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert the Spark DataFrame to a Pandas DataFrame for plotting\n",
        "pandas_df = most_common_offence_group.toPandas()\n",
        "\n",
        "# Plot the most common offence group\n",
        "plt.figure(figsize=(15, 10))\n",
        "plt.bar(pandas_df['Offence_Group'], pandas_df['TotalOccurrences'])\n",
        "plt.xlabel('Offence Group')\n",
        "plt.ylabel('Total Occurrences')\n",
        "plt.title('Most Common Offence Overall Based on Total Number of Offences')\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 913
        },
        "id": "6_YxY6TMeh56",
        "outputId": "035d7156-07bc-46e4-c8ff-ee6d53fdbddc"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Research Question 2:**\n",
        "\n",
        "Which law enforcement agencies (Force Names) have the highest number of recorded offences?"
      ],
      "metadata": {
        "id": "p22omE2lpQKn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the most common Force Name based on total number of occurrences\n",
        "most_common_Force_Name = spark.sql(\"\"\"\n",
        "    SELECT Force_Name, SUM(Number_of_Offences) AS TotalOccurrences\n",
        "    FROM Newdataset\n",
        "    GROUP BY Force_Name\n",
        "    ORDER BY TotalOccurrences DESC\n",
        "\"\"\")\n",
        "\n",
        "most_common_Force_Name.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M9T-dwIQf7Ez",
        "outputId": "117a7c31-cdb2-4546-ba9c-156611b437ef"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-------------------+----------------+\n",
            "|         Force_Name|TotalOccurrences|\n",
            "+-------------------+----------------+\n",
            "|Metropolitan Police|         2337827|\n",
            "| Greater Manchester|          831862|\n",
            "|       Action Fraud|          759614|\n",
            "|     West Yorkshire|          707469|\n",
            "|      West Midlands|          625952|\n",
            "|              Cifas|          605163|\n",
            "|          Hampshire|          437530|\n",
            "|               Kent|          417154|\n",
            "|      Thames Valley|          416148|\n",
            "|  Avon and Somerset|          399936|\n",
            "|        Northumbria|          369608|\n",
            "|    South Yorkshire|          365940|\n",
            "|              Essex|          365620|\n",
            "|         Merseyside|          338016|\n",
            "|         Lancashire|          333527|\n",
            "|             Sussex|          313170|\n",
            "|        South Wales|          289532|\n",
            "|              CIFAS|          276997|\n",
            "| Devon and Cornwall|          265147|\n",
            "|    Nottinghamshire|          252128|\n",
            "+-------------------+----------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert the Spark DataFrame to a Pandas DataFrame for plotting\n",
        "pandas_df = most_common_Force_Name.toPandas()\n",
        "\n",
        "# Plot the most common Force Name\n",
        "plt.figure(figsize=(15, 10))\n",
        "\n",
        "# Plot the data from the Pandas DataFrame\n",
        "plt.bar(pandas_df['Force_Name'], pandas_df['TotalOccurrences'])\n",
        "\n",
        "plt.xlabel('Force Name')\n",
        "plt.ylabel('Total Occurrences')\n",
        "plt.title('Most Common Force Name Based on Total Number of Offences')\n",
        "plt.xticks(rotation=90)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 839
        },
        "id": "NUUScHrHnCNt",
        "outputId": "7645b854-2a5c-4e8e-b639-c31ebef53add"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Research Question 3:**\n",
        "\n",
        "How does the distribution of offences vary across different financial quarters?"
      ],
      "metadata": {
        "id": "rfdO8U7zrfFr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "offence_distribution_by_quarter = spark.sql(\"\"\"\n",
        "    SELECT Financial_Quarter, Offence_Group, SUM(Number_of_Offences) AS TotalOffences\n",
        "    FROM Newdataset\n",
        "    GROUP BY Financial_Quarter, Offence_Group\n",
        "    ORDER BY Financial_Quarter, TotalOffences DESC\n",
        "\"\"\")\n",
        "\n",
        "offence_distribution_by_quarter.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W3tgxmzwbb5z",
        "outputId": "7285118a-880f-4c5d-ebf8-c85286d5e6f2"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+-----------------+--------------------+-------------+\n",
            "|Financial_Quarter|       Offence_Group|TotalOffences|\n",
            "+-----------------+--------------------+-------------+\n",
            "|                1|      Theft offences|      1389201|\n",
            "|                1|Violence against ...|       853002|\n",
            "|                1|      Fraud offences|       495631|\n",
            "|                1|Criminal damage a...|       426079|\n",
            "|                1|Public order offe...|       209396|\n",
            "|                1|       Drug offences|       107169|\n",
            "|                1|     Sexual offences|        93355|\n",
            "|                1|Miscellaneous cri...|        56206|\n",
            "|                1|             Robbery|        43109|\n",
            "|                1|Possession of wea...|        23445|\n",
            "|                2|      Theft offences|      1426175|\n",
            "|                2|Violence against ...|       890343|\n",
            "|                2|      Fraud offences|       465609|\n",
            "|                2|Criminal damage a...|       423212|\n",
            "|                2|Public order offe...|       230436|\n",
            "|                2|       Drug offences|       108040|\n",
            "|                2|     Sexual offences|        93525|\n",
            "|                2|Miscellaneous cri...|        57096|\n",
            "|                2|             Robbery|        46350|\n",
            "|                2|Possession of wea...|        24628|\n",
            "+-----------------+--------------------+-------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert the Spark DataFrame to a Pandas DataFrame for plotting\n",
        "pandas_df = offence_distribution_by_quarter.toPandas()\n",
        "\n",
        "# Create a pivot table to visualize the distribution\n",
        "pivot_table = pd.pivot_table(pandas_df, values='TotalOffences', index='Offence_Group', columns='Financial_Quarter', aggfunc='sum')\n",
        "\n",
        "# Plot the distribution using a bar chart or heatmap\n",
        "pivot_table.plot(kind='bar', figsize=(15, 10))\n",
        "plt.xlabel('Offence Group')\n",
        "plt.ylabel('Total Number of Offences')\n",
        "plt.title('Distribution of Offences Across Financial Quarters')\n",
        "plt.xticks(rotation=90)\n",
        "plt.legend(title='Financial Quarter')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 904
        },
        "id": "BSvb7WGhrynv",
        "outputId": "1b225b49-c3b1-4933-971e-178ae986d1a0"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "OffenceDistribution_by_Financial_Year = spark.sql(\"\"\"\n",
        "    SELECT Financial_Year, Offence_Group, Offence_Code, SUM(Number_of_Offences) AS TotalOffences\n",
        "    FROM Newdataset\n",
        "    GROUP BY Financial_Year, Offence_Group, Offence_Code\n",
        "    ORDER BY Financial_Year, TotalOffences DESC\n",
        "\"\"\")\n",
        "\n",
        "OffenceDistribution_by_Financial_Year.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "veurb4obu-r8",
        "outputId": "9d3329ba-c2c6-4d07-8d33-efd95642802e"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------+--------------------+------------+-------------+\n",
            "|Financial_Year|       Offence_Group|Offence_Code|TotalOffences|\n",
            "+--------------+--------------------+------------+-------------+\n",
            "|       2015/16|Violence against ...|          8N|       403665|\n",
            "|       2015/16|      Theft offences|          49|       345619|\n",
            "|       2015/16|Violence against ...|        105A|       344178|\n",
            "|       2015/16|      Theft offences|          46|       337254|\n",
            "|       2015/16|      Fraud offences|       CIFAS|       298968|\n",
            "|       2015/16|      Theft offences|          45|       239229|\n",
            "|       2015/16|Criminal damage a...|         58C|       227738|\n",
            "|       2015/16|      Fraud offences|          AF|       220638|\n",
            "|       2015/16|      Theft offences|         30A|       176861|\n",
            "|       2015/16|      Theft offences|         28A|       154283|\n",
            "|       2015/16|Violence against ...|          8L|       152708|\n",
            "|       2015/16|Public order offe...|          9A|       135229|\n",
            "|       2015/16|Criminal damage a...|         58A|       125699|\n",
            "|       2015/16|Criminal damage a...|         58D|       111070|\n",
            "|       2015/16|      Fraud offences|      FFA UK|        99546|\n",
            "|       2015/16|       Drug offences|         92E|        93634|\n",
            "|       2015/16|      Theft offences|          44|        86730|\n",
            "|       2015/16|      Theft offences|          39|        83321|\n",
            "|       2015/16|      Theft offences|          48|        75941|\n",
            "|       2015/16|      Theft offences|         49A|        64764|\n",
            "+--------------+--------------------+------------+-------------+\n",
            "only showing top 20 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert the Spark DataFrame to a Pandas DataFrame\n",
        "pandas_df = OffenceDistribution_by_Financial_Year.toPandas()\n",
        "\n",
        "# Set the plot size\n",
        "plt.figure(figsize=(15, 10))\n",
        "\n",
        "# Create a bar plot using Seaborn\n",
        "sns.barplot(x='Offence_Group', y='TotalOffences', hue='Financial_Year', data=pandas_df)\n",
        "plt.xlabel('Offence Group')\n",
        "plt.ylabel('Total Number of Offences')\n",
        "plt.title('Distribution of Offences Across Financial Years')\n",
        "plt.xticks(rotation=90)\n",
        "plt.legend(title='Financial Year')\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 882
        },
        "id": "Ur_oegKtJhPm",
        "outputId": "3b6dbea6-51ef-472d-d665-082caf9ac04e"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 1 Axes>"
            ],
            "image/png": "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2P33368dO3Zo69at5lhaWpreeecdVa1a1bwC8OrP4ubmpjp16sgwDGVmZiorKyvX7ZYBAQGqWLHidT9rYXN1dZXNZlNWVpY5duzYsVwrFOdXfr8jefVx9X7DMDRjxowC9XEj4eHh8vX11WuvvabMzMxc+0+fPn3NviSZK9nmx/nz53Xx4kW7sWrVqsnHx6dIf/YAgH82rsADAMAC1qxZo59++kmXLl3SyZMntWHDBsXGxqpKlSr6/PPPzat58jJhwgRt3rxZHTt2VJUqVXTq1CnNmTNHlSpVMh/EX61aNZUuXVrz5s2Tj4+PvLy81KRJkzyfAZYf/v7+uueee9SrVy+dPHlS06dPV/Xq1c0HxkvSM888o2XLlql9+/Z69NFHdeTIEX3wwQd2D8R3tLcHH3xQ9957r15++WUdO3ZMDRo00Lp16xQdHa2BAwfmmrug+vbtq7fffls9e/bUrl27VLVqVS1btkxbtmzR9OnTC/yMumnTpumnn37S888/r5iYGPNKu7Vr1yo6OlotW7bU1KlTC9z3U089pU8//VTPPfecNm7cqGbNmikrK0s//fSTPv30U61duzbPhQau57XXXtO6devUsmVL9e3bV7Vr19aJEye0dOlSffPNNypdurSGDBmizz//XA888IB69uyp0NBQpaWlac+ePVq2bJmOHTumcuXK6ZlnntHZs2fVunVrVapUSb/++qveeustNWzYMNeVdTnS09P12Wef6b777rvmn4NOnTppxowZOnXqlKpXr66XX35Zr7zyipo3b66HHnpI7u7u2rlzpypWrKiJEyde9/MOHz5cH330kTp06KD+/fvL399fixYt0tGjR/XZZ5+ZV2S2a9dOQUFBatasmQIDA3XgwAHNmjVLHTt2lI+Pj5KSklSpUiU9/PDDatCggby9vfXVV19p586df+tn/Hd17NhRb775ptq3b6/HH39cp06d0uzZs1W9enXzFm5H5ec7crVatWqpWrVqeumll/THH3/I19dXn332WaEt+uDr66u5c+fqqaeeUqNGjdStWzeVL19eCQkJWr16tZo1a6ZZs2bJ19fXfGZdZmambrnlFq1bt05Hjx7N97EOHTqkNm3a6NFHH1WdOnVUokQJrVixQidPnlS3bt0K5fMBAIqBolj6FgAAXLZgwQJDkvlyc3MzgoKCjPvuu8+YMWOGkZKSkus9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kydP1oQJE2wbyhQsWFADBgxQr169mBkm6f6PCYGHFB4erjp16kiSli5dqvz58+v06dNatGiRpk6dajgdHkZsbKzta9y4cXrvvfe0efNmXblyxe4cOwq7pg4dOigiIkLSnUVgp0+frixZsqhPnz4aMGCA4XRw1J9//qmLFy+mar906ZLtHs2dO3eq3YbhfDJnzqz9+/ebjgEAj41NmzZpxYoVevrpp3Xo0CGtXr1a5cqVU2xsrPbt22c6HtKpWLFiatWqFcU7F2WxWNSnTx+dPXtWf/75p/7880+dPXtWvXv3pnj3/zECD+nm4+OjI0eOqGjRonrllVdUtmxZDR8+XGfOnFGpUqXYQc8FeHh42L0p3t2w4q/YxMJ98HTStbVt21Y7duzQhAkT9PTTT0uSfv31V/Xv3181a9bUF198oW+//Vaffvqpdu/ebTgtHqRPnz7y9vZmQxk3kJKSogULFmj58uU6deqULBaL/P399e9//1vt2rXjlw/AScTFxalbt25aunSpUlJS9OGHH+q9997jHnVB9xss8teNverWrStPT89HnAzpcfHiRR09elSSVLp0aeXNm9dwIufBJhZIt8DAQK1cuVIvvfSS1q5dqz59+ki6c+PdXZ8Jzm3Tpk2mI+Afcq8pesWKFVOxYsUMJ0Naff755+rTp49ee+01JSUlSZIyZcqkkJAQTZo0SdKdDztz5swxGRMPKSkpSfPmzdP69evvuenBxIkTDSWDI6xWq1q0aKEff/xRFSpUUHBwsKxWqw4fPqz27dtr+fLlWrlypemYAHRn46fdu3ercOHC+v3333X06FElJCSwIZ8LmjRpki5duqSEhAT5+vpKkv744w/5+Pgoe/bsunjxogICArRp0ybWlXUB169f19tvv61vvvlGKSkpkiRPT0+9+uqrmj59eqpdpB9HjMBDui1dulRt2rRRcnKyGjZsqHXr1kmSPv74Y23ZskU//fST4YR4GKNGjVL//v1tm5HAfeTNm1fbt29njS03ExcXp5MnT0q6swtb9uzZDSdCWtxvMXXpzgiCjRs3PsI0SKv58+erd+/eWrVqVao+3bhxo1588UVNmzZNb775pqGEACRp7NixGj58uLp06aJPPvlEJ06cULt27RQbG6svv/xSNWrUMB0RDvjmm280a9YszZkzRyVKlJAknThxQl27dlWXLl1Uq1Yt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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Analyse the trend of total offences across financial years.**"
      ],
      "metadata": {
        "id": "2-fRztTCOktP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "total_offences_by_year = spark.sql(\"\"\"\n",
        "    SELECT Financial_Year, SUM(Number_of_Offences) AS TotalOffences\n",
        "    FROM Newdataset\n",
        "    GROUP BY Financial_Year\n",
        "    ORDER BY Financial_Year\n",
        "\"\"\")\n",
        "\n",
        "total_offences_by_year.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7LpAUGD6Ne7P",
        "outputId": "42e76dd8-5061-482d-ba1e-ce7a1dbb0f91"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------+-------------+\n",
            "|Financial_Year|TotalOffences|\n",
            "+--------------+-------------+\n",
            "|       2015/16|      4515903|\n",
            "|       2016/17|      4970709|\n",
            "|       2017/18|      5528510|\n",
            "+--------------+-------------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert the Spark DataFrame to a Pandas DataFrame for plotting\n",
        "pandas_df = total_offences_by_year.toPandas()\n",
        "\n",
        "# Plot the trend of total offences across financial years\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(pandas_df['Financial_Year'], pandas_df['TotalOffences'], marker='o')\n",
        "plt.xlabel('Financial Year')\n",
        "plt.ylabel('Total Number of Offences')\n",
        "plt.title('Trend of Total Offences Across Financial Years')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "BMGlrukhOXUG",
        "outputId": "79a64731-be0b-4f1d-8000-c45fd9ad5ae2"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Analysis showing the trend of total offences across financial quarters within each financial year.**"
      ],
      "metadata": {
        "id": "3otqSKyWO1Cg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "total_offences_by_year_quarter = spark.sql(\"\"\"\n",
        "    SELECT Financial_Year, Financial_Quarter, SUM(Number_of_Offences) AS TotalOffences\n",
        "    FROM Newdataset\n",
        "    GROUP BY Financial_Year, Financial_Quarter\n",
        "    ORDER BY Financial_Year, Financial_Quarter\n",
        "\"\"\")\n",
        "\n",
        "total_offences_by_year_quarter.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O-HIlHD3OcNO",
        "outputId": "3b5f3c35-2925-4cc7-e580-bbb1c14fb1e3"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------+-----------------+-------------+\n",
            "|Financial_Year|Financial_Quarter|TotalOffences|\n",
            "+--------------+-----------------+-------------+\n",
            "|       2015/16|                1|      1124664|\n",
            "|       2015/16|                2|      1129591|\n",
            "|       2015/16|                3|      1147625|\n",
            "|       2015/16|                4|      1114023|\n",
            "|       2016/17|                1|      1191127|\n",
            "|       2016/17|                2|      1229989|\n",
            "|       2016/17|                3|      1277482|\n",
            "|       2016/17|                4|      1272111|\n",
            "|       2017/18|                1|      1380802|\n",
            "|       2017/18|                2|      1405834|\n",
            "|       2017/18|                3|      1394465|\n",
            "|       2017/18|                4|      1347409|\n",
            "+--------------+-----------------+-------------+\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert the Spark DataFrame to a Pandas DataFrame for plotting\n",
        "pandas_df = total_offences_by_year_quarter.toPandas()\n",
        "\n",
        "# Plot the trend of total offences across financial quarters within each financial year\n",
        "plt.figure(figsize=(12, 8))\n",
        "for year in pandas_df['Financial_Year'].unique():\n",
        "  year_df = pandas_df[pandas_df['Financial_Year'] == year]\n",
        "  plt.plot(year_df['Financial_Quarter'], year_df['TotalOffences'], marker='o', label=year)\n",
        "\n",
        "plt.xlabel('Financial Quarter')\n",
        "plt.ylabel('Total Number of Offences')\n",
        "plt.title('Trend of Total Offences Across Financial Quarters Within Each Financial Year')\n",
        "plt.grid(True)\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 708
        },
        "id": "A0shZyLuOf3G",
        "outputId": "048241b6-7626-45d0-a9c2-20f4cf7956dd"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Crimedf = spark.sql(\"SELECT * FROM Newdataset\")"
      ],
      "metadata": {
        "id": "yK2l-Nr0d9I8"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Crimedf.show(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l7HpGk0ZjZw7",
        "outputId": "12a9555c-ee40-466b-ce3e-1ab490de2aca"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+--------------+-----------------+----------+--------------------+---------------+----------------+------------+------------------+---------------------+---------------------+-------------------------+\n",
            "|Financial_Year|Financial_Quarter|Force_Name| Offence_Description|  Offence_Group|Offence_Subgroup|Offence_Code|Number_of_Offences|Old_PRC_offence_group|New_ONS_offence_group|New_ONS_sub-offence_group|\n",
            "+--------------+-----------------+----------+--------------------+---------------+----------------+------------+------------------+---------------------+---------------------+-------------------------+\n",
            "|       2016/17|                3|   Cumbria|Rape of a female ...|Sexual offences|   Rape offences|         19C|                35|      Sexual offences|      Sexual offences|                     Rape|\n",
            "|       2016/17|                3|   Cumbria|Rape of a female ...|Sexual offences|   Rape offences|         19D|                 3|      Sexual offences|      Sexual offences|                     Rape|\n",
            "|       2016/17|                3|   Cumbria|Rape of a female ...|Sexual offences|   Rape offences|         19E|                13|      Sexual offences|      Sexual offences|                     Rape|\n",
            "|       2016/17|                3|   Cumbria|Rape of a male ag...|Sexual offences|   Rape offences|         19F|                 3|      Sexual offences|      Sexual offences|                     Rape|\n",
            "|       2016/17|                3|   Cumbria|Rape of a male ch...|Sexual offences|   Rape offences|         19H|                 8|      Sexual offences|      Sexual offences|                     Rape|\n",
            "+--------------+-----------------+----------+--------------------+---------------+----------------+------------+------------------+---------------------+---------------------+-------------------------+\n",
            "only showing top 5 rows\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Crimedf = Crimedf.toPandas() #convert dataframe to pandas"
      ],
      "metadata": {
        "id": "HRq-ZFcOilE6"
      },
      "execution_count": 66,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Crimedf"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 652
        },
        "id": "2M7htwK2jflq",
        "outputId": "ea822502-c3a5-487a-da7d-4f45c0593c39"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Financial_Year  Financial_Quarter                Force_Name  \\\n",
              "0            2015/16                  1         Avon and Somerset   \n",
              "1            2015/16                  1              Bedfordshire   \n",
              "2            2015/16                  1  British Transport Police   \n",
              "3            2015/16                  1            Cambridgeshire   \n",
              "4            2015/16                  1                  Cheshire   \n",
              "...              ...                ...                       ...   \n",
              "65679        2017/18                  4             West Midlands   \n",
              "65680        2017/18                  4            West Yorkshire   \n",
              "65681        2017/18                  4            West Yorkshire   \n",
              "65682        2017/18                  4                 Wiltshire   \n",
              "65683        2017/18                  4                 Wiltshire   \n",
              "\n",
              "                             Offence_Description          Offence_Group  \\\n",
              "0      Sexual assault on a male aged 13 and over        Sexual offences   \n",
              "1      Sexual assault on a male aged 13 and over        Sexual offences   \n",
              "2      Sexual assault on a male aged 13 and over        Sexual offences   \n",
              "3      Sexual assault on a male aged 13 and over        Sexual offences   \n",
              "4      Sexual assault on a male aged 13 and over        Sexual offences   \n",
              "...                                          ...                    ...   \n",
              "65679                           Violent disorder  Public order offences   \n",
              "65680            Burglary Business and Community         Theft offences   \n",
              "65681                           Violent disorder  Public order offences   \n",
              "65682            Burglary Business and Community         Theft offences   \n",
              "65683                           Violent disorder  Public order offences   \n",
              "\n",
              "            Offence_Subgroup Offence_Code  Number_of_Offences  \\\n",
              "0      Other sexual offences          17A                  28   \n",
              "1      Other sexual offences          17A                   8   \n",
              "2      Other sexual offences          17A                  10   \n",
              "3      Other sexual offences          17A                  13   \n",
              "4      Other sexual offences          17A                   6   \n",
              "...                      ...          ...                 ...   \n",
              "65679  Public order offences          62A                   9   \n",
              "65680  Non-domestic burglary          30C                1628   \n",
              "65681  Public order offences          62A                  18   \n",
              "65682  Non-domestic burglary          30C                 254   \n",
              "65683  Public order offences          62A                   7   \n",
              "\n",
              "              Old_PRC_offence_group  New_ONS_offence_group  \\\n",
              "0                   Sexual offences        Sexual offences   \n",
              "1                   Sexual offences        Sexual offences   \n",
              "2                   Sexual offences        Sexual offences   \n",
              "3                   Sexual offences        Sexual offences   \n",
              "4                   Sexual offences        Sexual offences   \n",
              "...                             ...                    ...   \n",
              "65679  Other miscellaneous offences  Public order offences   \n",
              "65680                          None                   None   \n",
              "65681  Other miscellaneous offences  Public order offences   \n",
              "65682                          None                   None   \n",
              "65683  Other miscellaneous offences  Public order offences   \n",
              "\n",
              "      New_ONS_sub-offence_group  \n",
              "0         Other sexual offences  \n",
              "1         Other sexual offences  \n",
              "2         Other sexual offences  \n",
              "3         Other sexual offences  \n",
              "4         Other sexual offences  \n",
              "...                         ...  \n",
              "65679     Public order offences  \n",
              "65680                      None  \n",
              "65681     Public order offences  \n",
              "65682                      None  \n",
              "65683     Public order offences  \n",
              "\n",
              "[65684 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4e9853aa-103f-404f-9d06-d7d77ab11111\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Financial_Year</th>\n",
              "      <th>Financial_Quarter</th>\n",
              "      <th>Force_Name</th>\n",
              "      <th>Offence_Description</th>\n",
              "      <th>Offence_Group</th>\n",
              "      <th>Offence_Subgroup</th>\n",
              "      <th>Offence_Code</th>\n",
              "      <th>Number_of_Offences</th>\n",
              "      <th>Old_PRC_offence_group</th>\n",
              "      <th>New_ONS_offence_group</th>\n",
              "      <th>New_ONS_sub-offence_group</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Sexual assault on a male aged 13 and over</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>17A</td>\n",
              "      <td>28</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Bedfordshire</td>\n",
              "      <td>Sexual assault on a male aged 13 and over</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>17A</td>\n",
              "      <td>8</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>British Transport Police</td>\n",
              "      <td>Sexual assault on a male aged 13 and over</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>17A</td>\n",
              "      <td>10</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Cambridgeshire</td>\n",
              "      <td>Sexual assault on a male aged 13 and over</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>17A</td>\n",
              "      <td>13</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2015/16</td>\n",
              "      <td>1</td>\n",
              "      <td>Cheshire</td>\n",
              "      <td>Sexual assault on a male aged 13 and over</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>17A</td>\n",
              "      <td>6</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65679</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>4</td>\n",
              "      <td>West Midlands</td>\n",
              "      <td>Violent disorder</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>62A</td>\n",
              "      <td>9</td>\n",
              "      <td>Other miscellaneous offences</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>Public order offences</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65680</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>4</td>\n",
              "      <td>West Yorkshire</td>\n",
              "      <td>Burglary Business and Community</td>\n",
              "      <td>Theft offences</td>\n",
              "      <td>Non-domestic burglary</td>\n",
              "      <td>30C</td>\n",
              "      <td>1628</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65681</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>4</td>\n",
              "      <td>West Yorkshire</td>\n",
              "      <td>Violent disorder</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>62A</td>\n",
              "      <td>18</td>\n",
              "      <td>Other miscellaneous offences</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>Public order offences</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65682</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>4</td>\n",
              "      <td>Wiltshire</td>\n",
              "      <td>Burglary Business and Community</td>\n",
              "      <td>Theft offences</td>\n",
              "      <td>Non-domestic burglary</td>\n",
              "      <td>30C</td>\n",
              "      <td>254</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65683</th>\n",
              "      <td>2017/18</td>\n",
              "      <td>4</td>\n",
              "      <td>Wiltshire</td>\n",
              "      <td>Violent disorder</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>62A</td>\n",
              "      <td>7</td>\n",
              "      <td>Other miscellaneous offences</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>Public order offences</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>65684 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4e9853aa-103f-404f-9d06-d7d77ab11111')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4e9853aa-103f-404f-9d06-d7d77ab11111 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4e9853aa-103f-404f-9d06-d7d77ab11111');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ca3078e3-7c10-4cd6-8837-0d7537923d54\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ca3078e3-7c10-4cd6-8837-0d7537923d54')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ca3078e3-7c10-4cd6-8837-0d7537923d54 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_d45dbe8a-08a3-4897-98a3-413c55a76537\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Crimedf')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d45dbe8a-08a3-4897-98a3-413c55a76537 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('Crimedf');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Crimedf",
              "summary": "{\n  \"name\": \"Crimedf\",\n  \"rows\": 65684,\n  \"fields\": [\n    {\n      \"column\": \"Financial_Year\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"2015/16\",\n          \"2016/17\",\n          \"2017/18\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Financial_Quarter\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Force_Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 49,\n        \"samples\": [\n          \"Gloucestershire\",\n          \"Financial Fraud Action UK\",\n          \"CIFAS\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence_Description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 135,\n        \"samples\": [\n          \"Theft from the person\",\n          \"Theft in a dwelling other than from an automatic machine or meter\",\n          \"Making, supplying or possessing articles for use in fraud\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Robbery\",\n          \"Miscellaneous crimes against society\",\n          \"Possession of weapons offences\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence_Subgroup\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"Theft from a vehicle\",\n          \"Non-domestic burglary\",\n          \"Theft from the person\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence_Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 135,\n        \"samples\": [\n          \"39\",\n          \"40\",\n          \"33A\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number_of_Offences\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1552,\n        \"min\": -58,\n        \"max\": 84476,\n        \"num_unique_values\": 2968,\n        \"samples\": [\n          4450,\n          731,\n          2079\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Old_PRC_offence_group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Fraud and forgery\",\n          \"Other miscellaneous offences\",\n          \"Criminal damage\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_ONS_offence_group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Robbery\",\n          \"Miscellaneous crimes against society\",\n          \"Possession of weapons offences\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New_ONS_sub-offence_group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Other sexual offences\",\n          \"Public order offences\",\n          \"Bicycle theft\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Conversion of Variables**"
      ],
      "metadata": {
        "id": "9ZvxE0sNMCPP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Ensure 'Financial_Year' is a string\n",
        "Crimedf['Financial_Year'] = Crimedf['Financial_Year'].astype(str)\n",
        "\n",
        "# Now split and convert to numeric\n",
        "Crimedf['Financial_Year'] = Crimedf['Financial_Year'].str.split('/').str[0].astype(int)"
      ],
      "metadata": {
        "id": "BfqChOFoNVR3"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.pairplot(Crimedf)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 758
        },
        "id": "c7trkJSmrjnk",
        "outputId": "96aa2744-9815-48e0-fd07-817b6fcacdeb"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 750x750 with 12 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Crimedf = Crimedf.drop_duplicates(Crimedf) #deleting the duplicates found in the worksheet\n",
        "Crimedf.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M8CaGAJL0U8A",
        "outputId": "6521fe9a-bffc-4226-ff8c-2b5387455cf2"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(65684, 11)"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Crimedf.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Oc-2NrRo0hnd",
        "outputId": "3ac382a1-b264-4e06-afcd-7654ebc371c0"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Financial_Year', 'Financial_Quarter', 'Force_Name',\n",
              "       'Offence_Description', 'Offence_Group', 'Offence_Subgroup',\n",
              "       'Offence_Code', 'Number_of_Offences', 'Old_PRC_offence_group',\n",
              "       'New_ONS_offence_group', 'New_ONS_sub-offence_group'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Crimedf = Crimedf.drop(columns = ['Old_PRC_offence_group','New_ONS_offence_group', 'New_ONS_sub-offence_group'])"
      ],
      "metadata": {
        "id": "ijESn0LF0vhg"
      },
      "execution_count": 72,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Crimedf.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "aZO-bsq10jp4",
        "outputId": "00cfba20-9216-42e4-b296-8eb723e28281"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Financial_Year          int64\n",
              "Financial_Quarter       int64\n",
              "Force_Name             object\n",
              "Offence_Description    object\n",
              "Offence_Group          object\n",
              "Offence_Subgroup       object\n",
              "Offence_Code           object\n",
              "Number_of_Offences      int64\n",
              "dtype: object"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Financial_Year</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Financial_Quarter</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Force_Name</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Description</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Group</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Subgroup</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Code</th>\n",
              "      <td>object</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Number_of_Offences</th>\n",
              "      <td>int64</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> object</label>"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Crimedf.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "ScxF-BEt33CB",
        "outputId": "7aff61b1-5a3c-4099-8f3e-48ed9c5c20ea"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Financial_Year         0\n",
              "Financial_Quarter      0\n",
              "Force_Name             0\n",
              "Offence_Description    0\n",
              "Offence_Group          0\n",
              "Offence_Subgroup       0\n",
              "Offence_Code           0\n",
              "Number_of_Offences     0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Financial_Year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Financial_Quarter</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Force_Name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Description</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Group</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Subgroup</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Code</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Number_of_Offences</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Crimedf.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "r7nrUYX749qz",
        "outputId": "671f0f0f-717c-4967-b3ce-da3ed250e6f1"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Financial_Year         0\n",
              "Financial_Quarter      0\n",
              "Force_Name             0\n",
              "Offence_Description    0\n",
              "Offence_Group          0\n",
              "Offence_Subgroup       0\n",
              "Offence_Code           0\n",
              "Number_of_Offences     0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Financial_Year</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Financial_Quarter</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Force_Name</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Description</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Group</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Subgroup</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Offence_Code</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Number_of_Offences</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Detect Outliers**"
      ],
      "metadata": {
        "id": "zaaVvSYl6r3J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming 'Number_of_Offences' is the column you want to analyze for outliers\n",
        "# Calculate the IQR (Interquartile Range) for 'Number_of_Offences'\n",
        "\n",
        "Q1 = Crimedf['Number_of_Offences'].quantile(0.25)\n",
        "Q3 = Crimedf['Number_of_Offences'].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "\n",
        "# Define the outlier boundaries\n",
        "lower_bound = Q1 - 1.5 * IQR\n",
        "upper_bound = Q3 + 1.5 * IQR\n",
        "\n",
        "# Identify outliers\n",
        "outliers = Crimedf[(Crimedf['Number_of_Offences'] < lower_bound) | (Crimedf['Number_of_Offences'] > upper_bound)]\n",
        "\n",
        "# Show box plot to visualize outliers\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.boxplot(x='Number_of_Offences', data=Crimedf)\n",
        "plt.title('Box Plot of Number of Offences')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "eSiH6eie6LNQ",
        "outputId": "1e31d057-4260-4913-c8ef-0684b6c19979"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Handle Outliers**"
      ],
      "metadata": {
        "id": "kSbU_BHQ61cY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Handle outliers\n",
        "Crimedf['Number_of_Offences'] = np.where(Crimedf['Number_of_Offences'] > upper_bound, upper_bound,\n",
        "                                          np.where(Crimedf['Number_of_Offences'] < lower_bound, lower_bound,\n",
        "                                                   Crimedf['Number_of_Offences']))\n",
        "\n",
        "# Show box plot after handling outliers\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.boxplot(x='Number_of_Offences', data=Crimedf)\n",
        "plt.title('Box Plot of Number of Offences (after handling outliers)')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "oqJhUpu260-t",
        "outputId": "2068b334-2ee1-4355-cede-abced8654d18"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Display the Dataset**"
      ],
      "metadata": {
        "id": "wMbaQJry7DU7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Save the Pandas DataFrame to a CSV file\n",
        "Crimedf.to_csv('Crimedf.csv', index=False)"
      ],
      "metadata": {
        "id": "2zcFxk657RJT"
      },
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from functools import reduce\n",
        "\n",
        "\n",
        "# Map: Create a dictionary with ForceName as the key and NoOff as the value\n",
        "mapped_data = map(lambda x: {x[0]: x[1]}, \\\n",
        "                  zip(Crimedf['Force_Name'], \\\n",
        "                      Crimedf['Number_of_Offences']))\n",
        "\n",
        "# Reduce: Sum the NoOff values for each ForceName\n",
        "reduced_data = reduce(lambda x,\n",
        "                      y: {k: x.get(k, 0) + y.get(k, 0) \\\n",
        "                      for k in set(x) | set(y)}, mapped_data)\n",
        "\n",
        "reduced_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AabaYFcE8AKf",
        "outputId": "6a198e21-5160-4cc5-f3dd-e7f0b0a834e9"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Action Fraud': 2472.0,\n",
              " 'Greater Manchester': 132764.0,\n",
              " 'West Midlands': 119779.0,\n",
              " 'Warwickshire': 59950.0,\n",
              " 'Lancashire': 92333.0,\n",
              " 'Surrey': 75862.0,\n",
              " 'UK Finance': 618.0,\n",
              " 'Northumbria': 98314.0,\n",
              " 'Dorset': 63816.0,\n",
              " 'West Yorkshire': 126266.0,\n",
              " 'Nottinghamshire': 88873.0,\n",
              " 'Gwent': 62256.0,\n",
              " 'Humberside': 83249.0,\n",
              " 'Cleveland': 67677.0,\n",
              " 'North Wales': 61386.0,\n",
              " 'Lincolnshire': 61506.0,\n",
              " 'Northamptonshire': 71237.0,\n",
              " 'British Transport Police': 48898.0,\n",
              " 'Suffolk': 68124.0,\n",
              " 'Gloucestershire': 53655.0,\n",
              " 'Sussex': 97893.0,\n",
              " 'Cifas': 1648.0,\n",
              " 'South Yorkshire': 98917.0,\n",
              " 'Leicestershire': 75243.0,\n",
              " 'Cumbria': 48905.0,\n",
              " 'Hertfordshire': 82293.0,\n",
              " 'London, City of': 14828.0,\n",
              " 'Dyfed-Powys': 46981.0,\n",
              " 'Essex': 98684.0,\n",
              " 'Thames Valley': 104063.0,\n",
              " 'Merseyside': 98534.0,\n",
              " 'North Yorkshire': 60994.0,\n",
              " 'Staffordshire': 86539.0,\n",
              " 'CIFAS': 824.0,\n",
              " 'Devon and Cornwall': 87216.0,\n",
              " 'South Wales': 89873.0,\n",
              " 'Metropolitan Police': 171875.0,\n",
              " 'Wiltshire': 61602.0,\n",
              " 'Bedfordshire': 65475.0,\n",
              " 'Avon and Somerset': 100549.0,\n",
              " 'Derbyshire': 73549.0,\n",
              " 'Cheshire': 75900.0,\n",
              " 'Durham': 64849.0,\n",
              " 'Hampshire': 104751.0,\n",
              " 'Norfolk': 72308.0,\n",
              " 'West Mercia': 88255.0,\n",
              " 'Kent': 102128.0,\n",
              " 'Cambridgeshire': 72301.0,\n",
              " 'Financial Fraud Action UK': 1854.0}"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Crimedf"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 635
        },
        "id": "USf1WTK9Blwz",
        "outputId": "713c67dc-1aa3-4bb3-e65e-c48e32ea67d2"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Financial_Year  Financial_Quarter                Force_Name  \\\n",
              "0                2015                  1         Avon and Somerset   \n",
              "1                2015                  1              Bedfordshire   \n",
              "2                2015                  1  British Transport Police   \n",
              "3                2015                  1            Cambridgeshire   \n",
              "4                2015                  1                  Cheshire   \n",
              "...               ...                ...                       ...   \n",
              "65679            2017                  4             West Midlands   \n",
              "65680            2017                  4            West Yorkshire   \n",
              "65681            2017                  4            West Yorkshire   \n",
              "65682            2017                  4                 Wiltshire   \n",
              "65683            2017                  4                 Wiltshire   \n",
              "\n",
              "                             Offence_Description          Offence_Group  \\\n",
              "0      Sexual assault on a male aged 13 and over        Sexual offences   \n",
              "1      Sexual assault on a male aged 13 and over        Sexual offences   \n",
              "2      Sexual assault on a male aged 13 and over        Sexual offences   \n",
              "3      Sexual assault on a male aged 13 and over        Sexual offences   \n",
              "4      Sexual assault on a male aged 13 and over        Sexual offences   \n",
              "...                                          ...                    ...   \n",
              "65679                           Violent disorder  Public order offences   \n",
              "65680            Burglary Business and Community         Theft offences   \n",
              "65681                           Violent disorder  Public order offences   \n",
              "65682            Burglary Business and Community         Theft offences   \n",
              "65683                           Violent disorder  Public order offences   \n",
              "\n",
              "            Offence_Subgroup Offence_Code  Number_of_Offences  \n",
              "0      Other sexual offences          17A                28.0  \n",
              "1      Other sexual offences          17A                 8.0  \n",
              "2      Other sexual offences          17A                10.0  \n",
              "3      Other sexual offences          17A                13.0  \n",
              "4      Other sexual offences          17A                 6.0  \n",
              "...                      ...          ...                 ...  \n",
              "65679  Public order offences          62A                 9.0  \n",
              "65680  Non-domestic burglary          30C               206.0  \n",
              "65681  Public order offences          62A                18.0  \n",
              "65682  Non-domestic burglary          30C               206.0  \n",
              "65683  Public order offences          62A                 7.0  \n",
              "\n",
              "[65684 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-88803abf-f907-46a1-a257-4ed80eb31efc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Financial_Year</th>\n",
              "      <th>Financial_Quarter</th>\n",
              "      <th>Force_Name</th>\n",
              "      <th>Offence_Description</th>\n",
              "      <th>Offence_Group</th>\n",
              "      <th>Offence_Subgroup</th>\n",
              "      <th>Offence_Code</th>\n",
              "      <th>Number_of_Offences</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2015</td>\n",
              "      <td>1</td>\n",
              "      <td>Avon and Somerset</td>\n",
              "      <td>Sexual assault on a male aged 13 and over</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>17A</td>\n",
              "      <td>28.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2015</td>\n",
              "      <td>1</td>\n",
              "      <td>Bedfordshire</td>\n",
              "      <td>Sexual assault on a male aged 13 and over</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>17A</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2015</td>\n",
              "      <td>1</td>\n",
              "      <td>British Transport Police</td>\n",
              "      <td>Sexual assault on a male aged 13 and over</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>17A</td>\n",
              "      <td>10.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2015</td>\n",
              "      <td>1</td>\n",
              "      <td>Cambridgeshire</td>\n",
              "      <td>Sexual assault on a male aged 13 and over</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>17A</td>\n",
              "      <td>13.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2015</td>\n",
              "      <td>1</td>\n",
              "      <td>Cheshire</td>\n",
              "      <td>Sexual assault on a male aged 13 and over</td>\n",
              "      <td>Sexual offences</td>\n",
              "      <td>Other sexual offences</td>\n",
              "      <td>17A</td>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65679</th>\n",
              "      <td>2017</td>\n",
              "      <td>4</td>\n",
              "      <td>West Midlands</td>\n",
              "      <td>Violent disorder</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>62A</td>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65680</th>\n",
              "      <td>2017</td>\n",
              "      <td>4</td>\n",
              "      <td>West Yorkshire</td>\n",
              "      <td>Burglary Business and Community</td>\n",
              "      <td>Theft offences</td>\n",
              "      <td>Non-domestic burglary</td>\n",
              "      <td>30C</td>\n",
              "      <td>206.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65681</th>\n",
              "      <td>2017</td>\n",
              "      <td>4</td>\n",
              "      <td>West Yorkshire</td>\n",
              "      <td>Violent disorder</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>62A</td>\n",
              "      <td>18.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65682</th>\n",
              "      <td>2017</td>\n",
              "      <td>4</td>\n",
              "      <td>Wiltshire</td>\n",
              "      <td>Burglary Business and Community</td>\n",
              "      <td>Theft offences</td>\n",
              "      <td>Non-domestic burglary</td>\n",
              "      <td>30C</td>\n",
              "      <td>206.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65683</th>\n",
              "      <td>2017</td>\n",
              "      <td>4</td>\n",
              "      <td>Wiltshire</td>\n",
              "      <td>Violent disorder</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>Public order offences</td>\n",
              "      <td>62A</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>65684 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88803abf-f907-46a1-a257-4ed80eb31efc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-88803abf-f907-46a1-a257-4ed80eb31efc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-88803abf-f907-46a1-a257-4ed80eb31efc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-13ab51c1-ba8f-461d-882a-62a20aaf48e7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-13ab51c1-ba8f-461d-882a-62a20aaf48e7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-13ab51c1-ba8f-461d-882a-62a20aaf48e7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_6fcaa22c-baf5-4cc5-9e79-4ab6b90397e3\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Crimedf')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6fcaa22c-baf5-4cc5-9e79-4ab6b90397e3 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('Crimedf');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Crimedf",
              "summary": "{\n  \"name\": \"Crimedf\",\n  \"rows\": 65684,\n  \"fields\": [\n    {\n      \"column\": \"Financial_Year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2015,\n        \"max\": 2017,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2015,\n          2016,\n          2017\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Financial_Quarter\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Force_Name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 49,\n        \"samples\": [\n          \"Gloucestershire\",\n          \"Financial Fraud Action UK\",\n          \"CIFAS\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence_Description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 135,\n        \"samples\": [\n          \"Theft from the person\",\n          \"Theft in a dwelling other than from an automatic machine or meter\",\n          \"Making, supplying or possessing articles for use in fraud\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence_Group\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Robbery\",\n          \"Miscellaneous crimes against society\",\n          \"Possession of weapons offences\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence_Subgroup\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"Theft from a vehicle\",\n          \"Non-domestic burglary\",\n          \"Theft from the person\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Offence_Code\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 135,\n        \"samples\": [\n          \"39\",\n          \"40\",\n          \"33A\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Number_of_Offences\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 76.78715999248605,\n        \"min\": -58.0,\n        \"max\": 206.0,\n        \"num_unique_values\": 213,\n        \"samples\": [\n          20.0,\n          -17.0,\n          42.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **MACHINE LEARNING**"
      ],
      "metadata": {
        "id": "I5jMvEzO8y0V"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Initialise Machine Learning Models**"
      ],
      "metadata": {
        "id": "cUvnDXkUdKn7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.preprocessing import StandardScaler"
      ],
      "metadata": {
        "id": "XuwzyrIPq75U"
      },
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Selection of features and target variable**"
      ],
      "metadata": {
        "id": "8sD_ReyucqyG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Select features and target variable\n",
        "X = Crimedf[['Financial_Year', 'Financial_Quarter', 'Force_Name', 'Offence_Code']]\n",
        "y = Crimedf['Number_of_Offences']"
      ],
      "metadata": {
        "id": "te5C0jozrAJM"
      },
      "execution_count": 82,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Splitting test/train set 80/20**"
      ],
      "metadata": {
        "id": "h_vr-bznc6xo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the data into training and testing sets (after encoding)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "-29TYOcXrImC"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Enconding Categorical Variables**"
      ],
      "metadata": {
        "id": "CJShia1wc1Pq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert categorical features to numerical using one-hot encoding\n",
        "X_train = pd.get_dummies(X_train, columns=['Force_Name', 'Offence_Code'], drop_first=True)\n",
        "X_test = pd.get_dummies(X_test, columns=['Force_Name', 'Offence_Code'], drop_first=True)\n",
        "\n",
        "# Ensure both training and testing have the same columns after encoding\n",
        "X_train, X_test = X_train.align(X_test, join='left', axis=1, fill_value=0)"
      ],
      "metadata": {
        "id": "yI6EE-Z3rRH6"
      },
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Standard Scaling of Dataset**"
      ],
      "metadata": {
        "id": "5b2rKR62rTF8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Feature Scaling (Standardization) for models that are sensitive to scaling (e.g., Linear Regression)\n",
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "fu5OZIAUrSxp"
      },
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Linear Model**"
      ],
      "metadata": {
        "id": "xwPTt3lIrdAu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Linear Regression\n",
        "lr_model = LinearRegression()\n",
        "lr_model.fit(X_train_scaled, y_train)\n",
        "lr_predictions = lr_model.predict(X_test_scaled)\n",
        "\n",
        "print(\"Linear Regression Predictions:\")\n",
        "display(lr_predictions)\n",
        "\n",
        "print(\"\\n\")\n",
        "print(\"Mean Squared Error:\", mean_squared_error(y_test, lr_predictions))\n",
        "print(\"R-squared:\", r2_score(y_test, lr_predictions))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 139
        },
        "id": "fzOPK78ircxb",
        "outputId": "52cb2a4a-773f-435b-e64c-19732d3a116d"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Linear Regression Predictions:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "array([-11.91505079,   5.46483203, 131.76268359, ...,  11.33885546,\n",
              "       -21.3964961 ,  97.70799609])"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "Mean Squared Error: 1017.2462899022178\n",
            "R-squared: 0.8259267080919914\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Decision Tree Model**"
      ],
      "metadata": {
        "id": "uTA6ZR2zrjBd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 2. Decision Tree\n",
        "dt_model = DecisionTreeRegressor(random_state=42)\n",
        "dt_model.fit(X_train, y_train)  # Decision trees do not require scaling\n",
        "dt_predictions = dt_model.predict(X_test)\n",
        "\n",
        "print(\"Decision Tree Predictions:\")\n",
        "display(dt_predictions)\n",
        "\n",
        "print(\"\\n\")\n",
        "print(\"Mean Squared Error:\", mean_squared_error(y_test, dt_predictions))\n",
        "print(\"R-squared:\", r2_score(y_test, dt_predictions))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 121
        },
        "id": "ymTTjr3zritr",
        "outputId": "dd4ea0fe-4f55-4eba-fd43-f16938f4a07d"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Decision Tree Predictions:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "array([  6.,   7., 130., ...,   0.,   0.,  93.])"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "Mean Squared Error: 163.64938722691633\n",
            "R-squared: 0.9719959779297341\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Random Forest Model**"
      ],
      "metadata": {
        "id": "eZkrw4ctrpko"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 3. Random Forest\n",
        "rf_model = RandomForestRegressor(random_state=42)\n",
        "rf_model.fit(X_train, y_train)  # Random Forests also do not require scaling\n",
        "rf_predictions = rf_model.predict(X_test)\n",
        "\n",
        "print(\"Random Forest Predictions:\")\n",
        "display(rf_predictions)\n",
        "\n",
        "print(\"\\n\")\n",
        "print(\"Mean Squared Error:\", mean_squared_error(y_test, rf_predictions))\n",
        "print(\"R-squared:\", r2_score(y_test, rf_predictions))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 121
        },
        "id": "U6JmLwbkl16k",
        "outputId": "e5d6e98a-dcd1-43e4-a799-e8bbfa383fa0"
      },
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest Predictions:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "array([  5.27,   2.98, 145.74, ...,   3.  ,   0.28, 108.4 ])"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "Mean Squared Error: 113.79063133896628\n",
            "R-squared: 0.9805279114978454\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"y_test size:\", y_test.shape)\n",
        "print(\"rf_predictions size:\", rf_predictions.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cECRJQc4x_Si",
        "outputId": "b9fe919d-1e1e-4258-e1d0-0441622f62e6"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "y_test size: (13137,)\n",
            "rf_predictions size: (13137,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Comparison of Actual vs. Predicted Offences Using Linear Regression Model.**"
      ],
      "metadata": {
        "id": "UrdysjUEI8_w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Scatter plot for Linear Regression\n",
        "plt.scatter(y_test, lr_predictions)\n",
        "plt.xlabel(\"Actual Number of Offences\")\n",
        "plt.ylabel(\"Predicted Number of Offences\")\n",
        "plt.title(\"Actual vs. Predicted Number of Offences (Linear Regression)\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "KfsCQE0B40ql",
        "outputId": "cc502617-49c0-4704-e30e-0bc9fab81318"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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aWkpAKB3794oKSnBhg0bVNcrlUq9X94NGT58OMrKylQpEepKS0tVr52MjAyd54WdVWN/79qvVbFYrAp2Df1ttGnTBgEBAVi/fr3GMX/88Qdu3LiB/v37c34s2i5cuAC5XI4mTZpwvg3NBAHYu3cvcnJyMHDgQL3Xd+jQQVU48eWXX8a7776LnTt34qWXXsLEiRPRunVrpKenY+/evVi/fj2aN2+OunXrwtvbG+vXr4enpyfc3d3Rvn17hIaG4rXXXsPOnTvRp08fDB8+HPHx8di8ebNODZIBAwZg165dGDJkCPr374+EhASsX78eYWFhel/YXL388ssYM2YMvvnmG/Tu3VuncFtYWBi6deuG1q1bw9fXF//8849qeyxr9+7dmDBhAjZu3GjVHlxisRjfffcd+vbtiyZNmmDChAmoUaMGHj58iGPHjsHLywv79u0DACxatAhRUVHo3LkzpkyZgtLSUnz99ddo0qQJrl69avR+LP2d2mKMhkgkEnz44Yd6k4ebNGmCDh06YO7cuUhPT4evry+2b9+uelO1hoSEBAwcOBB9+vRBTEwMNm/ejFGjRqF58+YAygOzjz/+GHPnzkViYiIGDx4MT09PJCQkYPfu3Xj99dcxe/Zss+77888/R9++fREREYFXX31VtUVeLpeb3VvPz88PO3fuRP/+/dGqVSuditF37tzB6tWreZfAULd27Vp06tQJTZs2xaRJk1CnTh08fvwYMTExePDgAa5cucLrfF5eXli5ciVee+01tG3bFqNGjYKPjw+uXLmC/Px8/Pjjj5xfWzk5OahZsyZefPFFNG/eHB4eHoiOjsb58+c1Zk/0qVOnDsLDwxEdHa1TXwYoD44+/vhjncu7deuGTp068XrM6vi8bwwYMAA///wz5HI5wsLCEBMTg+joaPj5+Zl9/6ZMnz4dq1atwqeffort27fj3Xffxd69ezFgwACMHz8erVu3Rl5eHq5du4adO3ciMTER/v7+GDx4MNq1a4d33nkHd+7cQaNGjbB3716kp6cD4JYL07VrV7zxxhtYtmwZLl++jF69ekEqleL27dv49ddfsXr1arz44ov48ccf8c0332DIkCGoW7cucnJysGHDBnh5eWlUT09PT0f37t1Rs2ZN3Lt3D19//TVatGhhcDZGKpVi+fLlmDBhArp27YqRI0eqtsiHhIRg5syZZj+v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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Comparison of Actual vs. Predicted Offences Using Decision Tree Model.**"
      ],
      "metadata": {
        "id": "c1W_ERowJSD6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Scatter plot for the chosen model, e.g., Random Forest\n",
        "plt.scatter(y_test, dt_predictions)\n",
        "plt.xlabel(\"Actual Number of Offences\")\n",
        "plt.ylabel(\"Predicted Number of Offences\")\n",
        "plt.title(\"Actual vs. Predicted Number of Offences (Linear Regression)\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "ltxw03QF5gBF",
        "outputId": "b80b1d18-3f8d-4a4b-c787-72846193b2a6"
      },
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Comparison of Actual vs. Predicted Offences Using Random Forest Model.**"
      ],
      "metadata": {
        "id": "GVgmIze_4srW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Scatter plot for Random Forest\n",
        "plt.scatter(y_test, rf_predictions)\n",
        "plt.xlabel(\"Actual Number of Offences\")\n",
        "plt.ylabel(\"Predicted Number of Offences\")\n",
        "plt.title(\"Actual vs. Predicted Number of Offences (Random Forest)\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "SDjOFlxbxs2d",
        "outputId": "1e44d5e5-2060-473a-9de8-b6ecf2cbee9f"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Model Comparison**"
      ],
      "metadata": {
        "id": "evAsq3opIjOt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Model Comparison\n",
        "\n",
        "# Create a DataFrame to store the model performance metrics\n",
        "model_comparison = pd.DataFrame({\n",
        "    'Model': ['Linear Regression', 'Decision Tree', 'Random Forest'],\n",
        "    'MSE': [mean_squared_error(y_test, lr_predictions),\n",
        "            mean_squared_error(y_test, dt_predictions),\n",
        "            mean_squared_error(y_test, rf_predictions)],\n",
        "    'R-squared': [r2_score(y_test, lr_predictions),\n",
        "                 r2_score(y_test, dt_predictions),\n",
        "                 r2_score(y_test, rf_predictions)]\n",
        "})\n",
        "\n",
        "print(model_comparison)\n",
        "\n",
        "# Plotting the comparison\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(model_comparison['Model'], model_comparison['R-squared'])\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('R-squared')\n",
        "plt.title('Model Comparison (R-squared)')\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(model_comparison['Model'], model_comparison['MSE'])\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('MSE')\n",
        "plt.title('Model Comparison (MSE)')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "o_P3n73P98ZG",
        "outputId": "deaa747d-562e-4dc8-93bc-55064c789193"
      },
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "               Model          MSE  R-squared\n",
            "0  Linear Regression  1017.246290   0.825927\n",
            "1      Decision Tree   163.649387   0.971996\n",
            "2      Random Forest   113.790631   0.980528\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNuLgV0OecHvBBVVbOPfYiV",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}